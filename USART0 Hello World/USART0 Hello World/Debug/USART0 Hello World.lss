
USART0 Hello World.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800200  000001cc  00000240  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dbb  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ca8  00000000  00000000  000010b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000418  00000000  00000000  00001d5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005d1  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ea  00000000  00000000  000027bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000028a7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ec       	ldi	r30, 0xCC	; 204
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 31       	cpi	r26, 0x10	; 16
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	3b d0       	rcall	.+118    	; 0x186 <main>
 110:	5b c0       	rjmp	.+182    	; 0x1c8 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <USART0_init>:
void USART0_init(void);				// Declaration for initializing USART0

// This next function enables the Transmitter (TX) and sets the BAUD rate USART0
void USART0_init(void){
	//	USART0.CTRLB |= USART_TXEN_bm; This line is identical to the one bellow, but more complicated
	UBRR0 = ((float)(F_CPU / (16 * (float)USART0_BAUD_RATE)) - 1); // Equation is found on page 203
 114:	87 e6       	ldi	r24, 0x67	; 103
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 11c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	DDRE |= (1 << DDE1);		// sets the data direction of TX to output
 120:	8d b1       	in	r24, 0x0d	; 13
 122:	82 60       	ori	r24, 0x02	; 2
 124:	8d b9       	out	0x0d, r24	; 13
	UCSR0B |= (1 << TXEN0);		// Enable TX for USART0
 126:	e1 ec       	ldi	r30, 0xC1	; 193
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	88 60       	ori	r24, 0x08	; 8
 12e:	80 83       	st	Z, r24
	
	DDRA |= (1 << DDA2);		//Set data direction to output on PA2
 130:	81 b1       	in	r24, 0x01	; 1
 132:	84 60       	ori	r24, 0x04	; 4
 134:	81 b9       	out	0x01, r24	; 1
	PORTA |= (1 << PA2);		// Set PA2 to 1 (high) for RS232 USART0
 136:	82 b1       	in	r24, 0x02	; 2
 138:	84 60       	ori	r24, 0x04	; 4
 13a:	82 b9       	out	0x02, r24	; 2
 13c:	08 95       	ret

0000013e <USART0_sendChar>:
// This next function sends the String "Hello World" or any other string. In general, a String is sent Character by Character.
void USART0_sendChar(char c){
	/*This next loop checks if the previous transmission is completed by checking the USARTn.STATUS register.
	This is done by polling the status register until the empty flag "STATUS.DREIF" is set.
	*/
	while (!(UCSR0A & (1 << UDRE0)))
 13e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 142:	95 ff       	sbrs	r25, 5
 144:	fc cf       	rjmp	.-8      	; 0x13e <USART0_sendChar>
	{
		;
	}
	UDR0 = c;
 146:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 14a:	08 95       	ret

0000014c <USART0_sendString>:
}

// This function sends the each character of the String to the UART0_sendChar function
void USART0_sendString(char *str){
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)	{
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	d0 e0       	ldi	r29, 0x00	; 0
 15a:	06 c0       	rjmp	.+12     	; 0x168 <USART0_sendString+0x1c>
		USART0_sendChar(str[i]);
 15c:	f8 01       	movw	r30, r16
 15e:	ec 0f       	add	r30, r28
 160:	fd 1f       	adc	r31, r29
 162:	80 81       	ld	r24, Z
 164:	ec df       	rcall	.-40     	; 0x13e <USART0_sendChar>
	UDR0 = c;
}

// This function sends the each character of the String to the UART0_sendChar function
void USART0_sendString(char *str){
	for(size_t i = 0; i < strlen(str); i++)	{
 166:	21 96       	adiw	r28, 0x01	; 1
 168:	f8 01       	movw	r30, r16
 16a:	01 90       	ld	r0, Z+
 16c:	00 20       	and	r0, r0
 16e:	e9 f7       	brne	.-6      	; 0x16a <USART0_sendString+0x1e>
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	e0 1b       	sub	r30, r16
 174:	f1 0b       	sbc	r31, r17
 176:	ce 17       	cp	r28, r30
 178:	df 07       	cpc	r29, r31
 17a:	80 f3       	brcs	.-32     	; 0x15c <USART0_sendString+0x10>
		USART0_sendChar(str[i]);
	}
}
 17c:	df 91       	pop	r29
 17e:	cf 91       	pop	r28
 180:	1f 91       	pop	r17
 182:	0f 91       	pop	r16
 184:	08 95       	ret

00000186 <main>:


int main(void)
{
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
 18a:	cd b7       	in	r28, 0x3d	; 61
 18c:	de b7       	in	r29, 0x3e	; 62
 18e:	2f 97       	sbiw	r28, 0x0f	; 15
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
	char usart_str[] = "Hello World!\r\n";
 19a:	8f e0       	ldi	r24, 0x0F	; 15
 19c:	e0 e0       	ldi	r30, 0x00	; 0
 19e:	f2 e0       	ldi	r31, 0x02	; 2
 1a0:	de 01       	movw	r26, r28
 1a2:	11 96       	adiw	r26, 0x01	; 1
 1a4:	01 90       	ld	r0, Z+
 1a6:	0d 92       	st	X+, r0
 1a8:	8a 95       	dec	r24
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x1e>
	USART0_init();
 1ac:	b3 df       	rcall	.-154    	; 0x114 <USART0_init>
	
	while (1){
		USART0_sendString(usart_str);
 1ae:	ce 01       	movw	r24, r28
 1b0:	01 96       	adiw	r24, 0x01	; 1
 1b2:	cc df       	rcall	.-104    	; 0x14c <USART0_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	89 e6       	ldi	r24, 0x69	; 105
 1b8:	98 e1       	ldi	r25, 0x18	; 24
 1ba:	21 50       	subi	r18, 0x01	; 1
 1bc:	80 40       	sbci	r24, 0x00	; 0
 1be:	90 40       	sbci	r25, 0x00	; 0
 1c0:	e1 f7       	brne	.-8      	; 0x1ba <main+0x34>
 1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <main+0x3e>
 1c4:	00 00       	nop
 1c6:	f3 cf       	rjmp	.-26     	; 0x1ae <main+0x28>

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
