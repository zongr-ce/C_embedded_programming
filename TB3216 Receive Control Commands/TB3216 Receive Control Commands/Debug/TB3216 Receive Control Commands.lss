
TB3216 Receive Control Commands.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ba  00800200  0000036a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001083  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d05  00000000  00000000  000015fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005f8  00000000  00000000  00002300  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000028f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000647  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000266  00000000  00000000  00003033  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00003299  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea e6       	ldi	r30, 0x6A	; 106
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3b       	cpi	r26, 0xBA	; 186
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	f2 d0       	rcall	.+484    	; 0x2f4 <main>
 110:	2a c1       	rjmp	.+596    	; 0x366 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <red_LED_OFF>:
void green_LED_ON(void);
void green_LED_OFF(void);
void command_Message();

void red_LED_OFF(){
	DDRH |= (1 << DDH6);
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24
	PORTH |= (1 << PH6);
 11e:	e2 e0       	ldi	r30, 0x02	; 2
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
 128:	08 95       	ret

0000012a <red_LED_ON>:
}

void red_LED_ON(){
	DDRH |= (1 << DDH6);
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	80 64       	ori	r24, 0x40	; 64
 132:	80 83       	st	Z, r24
	PORTH &= ~(1 << PH6);
 134:	e2 e0       	ldi	r30, 0x02	; 2
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z
 13a:	8f 7b       	andi	r24, 0xBF	; 191
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <green_LED_OFF>:
}

void green_LED_OFF(){
	DDRH |= (1 << DDH5);
 140:	e1 e0       	ldi	r30, 0x01	; 1
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	80 81       	ld	r24, Z
 146:	80 62       	ori	r24, 0x20	; 32
 148:	80 83       	st	Z, r24
	PORTH |= (1 << PH5);
 14a:	e2 e0       	ldi	r30, 0x02	; 2
 14c:	f1 e0       	ldi	r31, 0x01	; 1
 14e:	80 81       	ld	r24, Z
 150:	80 62       	ori	r24, 0x20	; 32
 152:	80 83       	st	Z, r24
 154:	08 95       	ret

00000156 <green_LED_ON>:
}

void green_LED_ON(){
	DDRH |= (1 << DDH5);
 156:	e1 e0       	ldi	r30, 0x01	; 1
 158:	f1 e0       	ldi	r31, 0x01	; 1
 15a:	80 81       	ld	r24, Z
 15c:	80 62       	ori	r24, 0x20	; 32
 15e:	80 83       	st	Z, r24
	PORTH &= ~(1 << PH5);
 160:	e2 e0       	ldi	r30, 0x02	; 2
 162:	f1 e0       	ldi	r31, 0x01	; 1
 164:	80 81       	ld	r24, Z
 166:	8f 7d       	andi	r24, 0xDF	; 223
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <blink_Leds>:
}

void blink_Leds(){
	DDRH |= (1 << DDH5); // Data direction for the green led
 16c:	e1 e0       	ldi	r30, 0x01	; 1
 16e:	f1 e0       	ldi	r31, 0x01	; 1
 170:	80 81       	ld	r24, Z
 172:	80 62       	ori	r24, 0x20	; 32
 174:	80 83       	st	Z, r24
	DDRH |= (1 << DDH6); // Data direction for the red led
 176:	80 81       	ld	r24, Z
 178:	80 64       	ori	r24, 0x40	; 64
 17a:	80 83       	st	Z, r24
	for (int i = 0; i < 11; i++){
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	2a c0       	rjmp	.+84     	; 0x1d6 <blink_Leds+0x6a>
		PORTH &= ~(1 << PH5); // GREEN LED ON
 182:	e2 e0       	ldi	r30, 0x02	; 2
 184:	f1 e0       	ldi	r31, 0x01	; 1
 186:	20 81       	ld	r18, Z
 188:	2f 7d       	andi	r18, 0xDF	; 223
 18a:	20 83       	st	Z, r18
		PORTH |= (1 << PH6); // RED LED OFF
 18c:	20 81       	ld	r18, Z
 18e:	20 64       	ori	r18, 0x40	; 64
 190:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 192:	2f ef       	ldi	r18, 0xFF	; 255
 194:	33 ec       	ldi	r19, 0xC3	; 195
 196:	49 e0       	ldi	r20, 0x09	; 9
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	30 40       	sbci	r19, 0x00	; 0
 19c:	40 40       	sbci	r20, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <blink_Leds+0x2c>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <blink_Leds+0x36>
 1a2:	00 00       	nop
		_delay_ms(200);
		PORTH |= (1 << PH5); // GREEN LED OFF
 1a4:	20 81       	ld	r18, Z
 1a6:	20 62       	ori	r18, 0x20	; 32
 1a8:	20 83       	st	Z, r18
		PORTH &= ~(1 << PH6); // RED LED ON
 1aa:	20 81       	ld	r18, Z
 1ac:	2f 7b       	andi	r18, 0xBF	; 191
 1ae:	20 83       	st	Z, r18
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	33 ec       	ldi	r19, 0xC3	; 195
 1b4:	49 e0       	ldi	r20, 0x09	; 9
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	30 40       	sbci	r19, 0x00	; 0
 1ba:	40 40       	sbci	r20, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <blink_Leds+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <blink_Leds+0x54>
 1c0:	00 00       	nop
		_delay_ms(200);
		if (i == 10){
 1c2:	8a 30       	cpi	r24, 0x0A	; 10
 1c4:	91 05       	cpc	r25, r1
 1c6:	31 f4       	brne	.+12     	; 0x1d4 <blink_Leds+0x68>
					PORTH |= (1 << PH5); // GREEN LED OFF
 1c8:	20 81       	ld	r18, Z
 1ca:	20 62       	ori	r18, 0x20	; 32
 1cc:	20 83       	st	Z, r18
					PORTH |= (1 << PH6); // RED LED ON
 1ce:	20 81       	ld	r18, Z
 1d0:	20 64       	ori	r18, 0x40	; 64
 1d2:	20 83       	st	Z, r18
}

void blink_Leds(){
	DDRH |= (1 << DDH5); // Data direction for the green led
	DDRH |= (1 << DDH6); // Data direction for the red led
	for (int i = 0; i < 11; i++){
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	8b 30       	cpi	r24, 0x0B	; 11
 1d8:	91 05       	cpc	r25, r1
 1da:	9c f2       	brlt	.-90     	; 0x182 <blink_Leds+0x16>
					PORTH |= (1 << PH5); // GREEN LED OFF
					PORTH |= (1 << PH6); // RED LED ON
		}
		
	}
}
 1dc:	08 95       	ret

000001de <USART0_init>:

void USART0_init(void){
	UBRR0 = ((float)(F_CPU / (16 * (float)USART0_BAUD_RATE)) - 1);
 1de:	87 e6       	ldi	r24, 0x67	; 103
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 1e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	DDRE &= ~(1 << DDE0);		// sets the data direction of RX to input
 1ea:	8d b1       	in	r24, 0x0d	; 13
 1ec:	8e 7f       	andi	r24, 0xFE	; 254
 1ee:	8d b9       	out	0x0d, r24	; 13
	UCSR0B |= (1 << RXEN0);		// Enable RX for USART0		
 1f0:	e1 ec       	ldi	r30, 0xC1	; 193
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	80 61       	ori	r24, 0x10	; 16
 1f8:	80 83       	st	Z, r24
	DDRA |= (1 << DDA1);		//Set data direction to output on PA1
 1fa:	81 b1       	in	r24, 0x01	; 1
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~(1 << PA1);		// Set PA1 to 0 (low) for RS232_00 USART0
 200:	82 b1       	in	r24, 0x02	; 2
 202:	8d 7f       	andi	r24, 0xFD	; 253
 204:	82 b9       	out	0x02, r24	; 2
		
	DDRE |= (1 << DDE1);		// sets the data direction of TX to output
 206:	8d b1       	in	r24, 0x0d	; 13
 208:	82 60       	ori	r24, 0x02	; 2
 20a:	8d b9       	out	0x0d, r24	; 13
	UCSR0B |= (1 << TXEN0);		// Enable TX for USART0
 20c:	80 81       	ld	r24, Z
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	80 83       	st	Z, r24
	DDRA |= (1 << DDA2);		//Set data direction to output on PA2
 212:	81 b1       	in	r24, 0x01	; 1
 214:	84 60       	ori	r24, 0x04	; 4
 216:	81 b9       	out	0x01, r24	; 1
	PORTA |= (1 << PA2);		// Set PA2 to 1 (high) for RS232_01_02 USART0
 218:	82 b1       	in	r24, 0x02	; 2
 21a:	84 60       	ori	r24, 0x04	; 4
 21c:	82 b9       	out	0x02, r24	; 2
 21e:	08 95       	ret

00000220 <USART0_sendChar>:

void USART0_sendChar(char c){
	/*This next loop checks if the previous transmission is completed by checking the USARTn.STATUS register.
	This is done by polling the status register until the empty flag "STATUS.DREIF" is set.
	*/
	while (!(UCSR0A & (1 << UDRE0)))
 220:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 224:	95 ff       	sbrs	r25, 5
 226:	fc cf       	rjmp	.-8      	; 0x220 <USART0_sendChar>
	{
		;
	}
	UDR0 = c;
 228:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 22c:	08 95       	ret

0000022e <USART0_sendString>:
}

void USART0_sendString(char *str){
 22e:	0f 93       	push	r16
 230:	1f 93       	push	r17
 232:	cf 93       	push	r28
 234:	df 93       	push	r29
 236:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)	{
 238:	c0 e0       	ldi	r28, 0x00	; 0
 23a:	d0 e0       	ldi	r29, 0x00	; 0
 23c:	06 c0       	rjmp	.+12     	; 0x24a <USART0_sendString+0x1c>
		USART0_sendChar(str[i]);
 23e:	f8 01       	movw	r30, r16
 240:	ec 0f       	add	r30, r28
 242:	fd 1f       	adc	r31, r29
 244:	80 81       	ld	r24, Z
 246:	ec df       	rcall	.-40     	; 0x220 <USART0_sendChar>
	}
	UDR0 = c;
}

void USART0_sendString(char *str){
	for(size_t i = 0; i < strlen(str); i++)	{
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	f8 01       	movw	r30, r16
 24c:	01 90       	ld	r0, Z+
 24e:	00 20       	and	r0, r0
 250:	e9 f7       	brne	.-6      	; 0x24c <USART0_sendString+0x1e>
 252:	31 97       	sbiw	r30, 0x01	; 1
 254:	e0 1b       	sub	r30, r16
 256:	f1 0b       	sbc	r31, r17
 258:	ce 17       	cp	r28, r30
 25a:	df 07       	cpc	r29, r31
 25c:	80 f3       	brcs	.-32     	; 0x23e <USART0_sendString+0x10>
		USART0_sendChar(str[i]);
	}
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	1f 91       	pop	r17
 264:	0f 91       	pop	r16
 266:	08 95       	ret

00000268 <USART0_read>:

char USART0_read(void){
	while (!(UCSR0A & (1 << RXC0)))
 268:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 26c:	88 23       	and	r24, r24
 26e:	e4 f7       	brge	.-8      	; 0x268 <USART0_read>
	{
		;
	}
	return UDR0;
 270:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 274:	08 95       	ret

00000276 <execute>:

void execute(char *command)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	ec 01       	movw	r28, r24
	if(strcmp(command, "rON") == 0){
 27c:	60 e0       	ldi	r22, 0x00	; 0
 27e:	72 e0       	ldi	r23, 0x02	; 2
 280:	69 d0       	rcall	.+210    	; 0x354 <strcmp>
 282:	89 2b       	or	r24, r25
 284:	29 f4       	brne	.+10     	; 0x290 <execute+0x1a>
		USART0_sendString("Red LED is now ON.\r\n");
 286:	84 e0       	ldi	r24, 0x04	; 4
 288:	92 e0       	ldi	r25, 0x02	; 2
		red_LED_ON();
 28a:	d1 df       	rcall	.-94     	; 0x22e <USART0_sendString>
 28c:	4e df       	rcall	.-356    	; 0x12a <red_LED_ON>
 28e:	2f c0       	rjmp	.+94     	; 0x2ee <execute+0x78>
	}
	else if (strcmp(command, "rOFF") == 0){
 290:	69 e1       	ldi	r22, 0x19	; 25
 292:	72 e0       	ldi	r23, 0x02	; 2
 294:	ce 01       	movw	r24, r28
 296:	5e d0       	rcall	.+188    	; 0x354 <strcmp>
 298:	89 2b       	or	r24, r25
		USART0_sendString("Red LED is now OFF.\r\n");
 29a:	29 f4       	brne	.+10     	; 0x2a6 <execute+0x30>
 29c:	8e e1       	ldi	r24, 0x1E	; 30
 29e:	92 e0       	ldi	r25, 0x02	; 2
 2a0:	c6 df       	rcall	.-116    	; 0x22e <USART0_sendString>
		red_LED_OFF();
 2a2:	38 df       	rcall	.-400    	; 0x114 <red_LED_OFF>
 2a4:	24 c0       	rjmp	.+72     	; 0x2ee <execute+0x78>
	}else if (strcmp(command, "gON") == 0){
 2a6:	64 e3       	ldi	r22, 0x34	; 52
 2a8:	72 e0       	ldi	r23, 0x02	; 2
 2aa:	ce 01       	movw	r24, r28
 2ac:	53 d0       	rcall	.+166    	; 0x354 <strcmp>
 2ae:	89 2b       	or	r24, r25
		USART0_sendString("Green LED is now ON.\r\n");
 2b0:	29 f4       	brne	.+10     	; 0x2bc <execute+0x46>
 2b2:	88 e3       	ldi	r24, 0x38	; 56
 2b4:	92 e0       	ldi	r25, 0x02	; 2
		green_LED_ON();
 2b6:	bb df       	rcall	.-138    	; 0x22e <USART0_sendString>
 2b8:	4e df       	rcall	.-356    	; 0x156 <green_LED_ON>
	} else if (strcmp(command, "gOFF") == 0){
 2ba:	19 c0       	rjmp	.+50     	; 0x2ee <execute+0x78>
 2bc:	6f e4       	ldi	r22, 0x4F	; 79
 2be:	72 e0       	ldi	r23, 0x02	; 2
 2c0:	ce 01       	movw	r24, r28
 2c2:	48 d0       	rcall	.+144    	; 0x354 <strcmp>
	USART0_sendString("Green LED is now OFF.\r\n");
 2c4:	89 2b       	or	r24, r25
 2c6:	29 f4       	brne	.+10     	; 0x2d2 <execute+0x5c>
 2c8:	84 e5       	ldi	r24, 0x54	; 84
	green_LED_OFF();
 2ca:	92 e0       	ldi	r25, 0x02	; 2
 2cc:	b0 df       	rcall	.-160    	; 0x22e <USART0_sendString>
	} else if (strcmp(command, "blink") == 0){
 2ce:	38 df       	rcall	.-400    	; 0x140 <green_LED_OFF>
 2d0:	0e c0       	rjmp	.+28     	; 0x2ee <execute+0x78>
 2d2:	6c e6       	ldi	r22, 0x6C	; 108
 2d4:	72 e0       	ldi	r23, 0x02	; 2
 2d6:	ce 01       	movw	r24, r28
 2d8:	3d d0       	rcall	.+122    	; 0x354 <strcmp>
		USART0_sendString("Green LED and Red LED are now blinking.\r\n");
 2da:	89 2b       	or	r24, r25
 2dc:	29 f4       	brne	.+10     	; 0x2e8 <execute+0x72>
 2de:	82 e7       	ldi	r24, 0x72	; 114
 2e0:	92 e0       	ldi	r25, 0x02	; 2
		blink_Leds();
 2e2:	a5 df       	rcall	.-182    	; 0x22e <USART0_sendString>
 2e4:	43 df       	rcall	.-378    	; 0x16c <blink_Leds>
 2e6:	03 c0       	rjmp	.+6      	; 0x2ee <execute+0x78>
	} else{
		USART0_sendString("Your Command is undefined.\r\n");
 2e8:	8c e9       	ldi	r24, 0x9C	; 156
 2ea:	92 e0       	ldi	r25, 0x02	; 2
 2ec:	a0 df       	rcall	.-192    	; 0x22e <USART0_sendString>
 2ee:	df 91       	pop	r29
	}
}
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <main>:
 2f4:	cf 93       	push	r28

int main(void)
{
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	28 97       	sbiw	r28, 0x08	; 8
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
	
	char command[8];
	int index = 0;
	char c;
	
	USART0_init();
 308:	6a df       	rcall	.-300    	; 0x1de <USART0_init>
		USART0_sendString("Your Command is undefined.\r\n");
	}
}

int main(void)
{
 30a:	00 e0       	ldi	r16, 0x00	; 0
	
	USART0_init();
	
    while (1) 
    {
		c = USART0_read();
 30c:	10 e0       	ldi	r17, 0x00	; 0
 30e:	ac df       	rcall	.-168    	; 0x268 <USART0_read>
		if (c != '\n' && c !='\r'){
 310:	8a 30       	cpi	r24, 0x0A	; 10
 312:	99 f0       	breq	.+38     	; 0x33a <main+0x46>
 314:	8d 30       	cpi	r24, 0x0D	; 13
 316:	89 f0       	breq	.+34     	; 0x33a <main+0x46>
			command[index++] = c;
 318:	98 01       	movw	r18, r16
 31a:	2f 5f       	subi	r18, 0xFF	; 255
 31c:	3f 4f       	sbci	r19, 0xFF	; 255
 31e:	e1 e0       	ldi	r30, 0x01	; 1
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	ec 0f       	add	r30, r28
 324:	fd 1f       	adc	r31, r29
 326:	e0 0f       	add	r30, r16
 328:	f1 1f       	adc	r31, r17
 32a:	80 83       	st	Z, r24
			if (index > 8){
 32c:	29 30       	cpi	r18, 0x09	; 9
 32e:	31 05       	cpc	r19, r1
 330:	14 f4       	brge	.+4      	; 0x336 <main+0x42>
	
    while (1) 
    {
		c = USART0_read();
		if (c != '\n' && c !='\r'){
			command[index++] = c;
 332:	89 01       	movw	r16, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <main+0x46>
			if (index > 8){
				index = 0;
 336:	00 e0       	ldi	r16, 0x00	; 0
 338:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		if (c == '\n'){
 33a:	8a 30       	cpi	r24, 0x0A	; 10
 33c:	41 f7       	brne	.-48     	; 0x30e <main+0x1a>
			command[index] = '\0';
 33e:	e1 e0       	ldi	r30, 0x01	; 1
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	ec 0f       	add	r30, r28
 344:	fd 1f       	adc	r31, r29
 346:	e0 0f       	add	r30, r16
 348:	f1 1f       	adc	r31, r17
 34a:	10 82       	st	Z, r1
			index = 0;
			execute(command);
 34c:	ce 01       	movw	r24, r28
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	92 df       	rcall	.-220    	; 0x276 <execute>
 352:	db cf       	rjmp	.-74     	; 0x30a <main+0x16>

00000354 <strcmp>:
 354:	fb 01       	movw	r30, r22
 356:	dc 01       	movw	r26, r24
 358:	8d 91       	ld	r24, X+
 35a:	01 90       	ld	r0, Z+
 35c:	80 19       	sub	r24, r0
 35e:	01 10       	cpse	r0, r1
 360:	d9 f3       	breq	.-10     	; 0x358 <strcmp+0x4>
 362:	99 0b       	sbc	r25, r25
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
