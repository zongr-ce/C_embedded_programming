
Atmel interrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  0000030e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000030e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000340  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ef8  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c73  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004d4  00000000  00000000  00001f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002430  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000603  00000000  00000000  00002584  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000302  00000000  00000000  00002b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00002e89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	db c0       	rjmp	.+438    	; 0x1d4 <__vector_7>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	0c c1       	rjmp	.+536    	; 0x23e <__vector_9>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	d9 d0       	rcall	.+434    	; 0x2a8 <main>
  f6:	df c0       	rjmp	.+446    	; 0x2b6 <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <red_LED_OFF>:
void LED_init(void);
void SWITCH_init(void);
void INTERRUPTS_init(void);

void red_LED_OFF(){
	PORTB |= (1 << LEDR_PIN);
  fa:	85 b1       	in	r24, 0x05	; 5
  fc:	80 64       	ori	r24, 0x40	; 64
  fe:	85 b9       	out	0x05, r24	; 5
 100:	08 95       	ret

00000102 <red_LED_ON>:
}
void red_LED_ON(){
	PORTB &= ~(1 << LEDR_PIN);
 102:	85 b1       	in	r24, 0x05	; 5
 104:	8f 7b       	andi	r24, 0xBF	; 191
 106:	85 b9       	out	0x05, r24	; 5
 108:	08 95       	ret

0000010a <green_LED_OFF>:
}
void green_LED_OFF(){
	PORTH |= (1 << LEDG_PIN);
 10a:	e2 e0       	ldi	r30, 0x02	; 2
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	80 81       	ld	r24, Z
 110:	80 62       	ori	r24, 0x20	; 32
 112:	80 83       	st	Z, r24
 114:	08 95       	ret

00000116 <green_LED_ON>:
}
void green_LED_ON(){
	PORTH &= ~(1 << LEDG_PIN);
 116:	e2 e0       	ldi	r30, 0x02	; 2
 118:	f1 e0       	ldi	r31, 0x01	; 1
 11a:	80 81       	ld	r24, Z
 11c:	8f 7d       	andi	r24, 0xDF	; 223
 11e:	80 83       	st	Z, r24
 120:	08 95       	ret

00000122 <blink_Leds>:
}
void blink_Leds(int i){
 122:	ac 01       	movw	r20, r24
	for (int a = 0; a < i; a++){
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	24 c0       	rjmp	.+72     	; 0x172 <blink_Leds+0x50>
		PORTH &= ~(1 << LEDG_PIN); // GREEN LED ON
 12a:	e2 e0       	ldi	r30, 0x02	; 2
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	90 81       	ld	r25, Z
 130:	9f 7d       	andi	r25, 0xDF	; 223
 132:	90 83       	st	Z, r25
		PORTB |= (1 << LEDR_PIN); // RED LED OFF
 134:	95 b1       	in	r25, 0x05	; 5
 136:	90 64       	ori	r25, 0x40	; 64
 138:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13a:	8f e1       	ldi	r24, 0x1F	; 31
 13c:	9e e4       	ldi	r25, 0x4E	; 78
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <blink_Leds+0x1c>
 142:	00 c0       	rjmp	.+0      	; 0x144 <blink_Leds+0x22>
 144:	00 00       	nop
		_delay_ms(5);
		PORTH |= (1 << LEDG_PIN); // GREEN LED OFF
 146:	90 81       	ld	r25, Z
 148:	90 62       	ori	r25, 0x20	; 32
 14a:	90 83       	st	Z, r25
		PORTB &= ~(1 << LEDR_PIN); // RED LED ON
 14c:	95 b1       	in	r25, 0x05	; 5
 14e:	9f 7b       	andi	r25, 0xBF	; 191
 150:	95 b9       	out	0x05, r25	; 5
 152:	8f e1       	ldi	r24, 0x1F	; 31
 154:	9e e4       	ldi	r25, 0x4E	; 78
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <blink_Leds+0x34>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <blink_Leds+0x3a>
 15c:	00 00       	nop
		_delay_ms(5);
		if (i == a-1){
 15e:	c9 01       	movw	r24, r18
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	48 17       	cp	r20, r24
 164:	59 07       	cpc	r21, r25
 166:	19 f4       	brne	.+6      	; 0x16e <blink_Leds+0x4c>
			PORTB |= (1 << LEDG_PIN); // GREEN LED OFF
 168:	85 b1       	in	r24, 0x05	; 5
 16a:	80 62       	ori	r24, 0x20	; 32
 16c:	85 b9       	out	0x05, r24	; 5
}
void green_LED_ON(){
	PORTH &= ~(1 << LEDG_PIN);
}
void blink_Leds(int i){
	for (int a = 0; a < i; a++){
 16e:	2f 5f       	subi	r18, 0xFF	; 255
 170:	3f 4f       	sbci	r19, 0xFF	; 255
 172:	24 17       	cp	r18, r20
 174:	35 07       	cpc	r19, r21
 176:	cc f2       	brlt	.-78     	; 0x12a <blink_Leds+0x8>
		_delay_ms(5);
		if (i == a-1){
			PORTB |= (1 << LEDG_PIN); // GREEN LED OFF
		}
	}
}
 178:	08 95       	ret

0000017a <LED_init>:

void LED_init(void){
	DDRB |= (1 << DDB6);		//Setting data direction for red LED to "output"
 17a:	84 b1       	in	r24, 0x04	; 4
 17c:	80 64       	ori	r24, 0x40	; 64
 17e:	84 b9       	out	0x04, r24	; 4
	DDRH |= (1 << DDH5);		//Setting data direction for green LED to "output"
 180:	e1 e0       	ldi	r30, 0x01	; 1
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	80 81       	ld	r24, Z
 186:	80 62       	ori	r24, 0x20	; 32
 188:	80 83       	st	Z, r24
 18a:	08 95       	ret

0000018c <SWITCH_init>:
}
void SWITCH_init(void){
	DDRE &= ~(1 << DDE6); //*******Why does this line break the code*************
 18c:	8d b1       	in	r24, 0x0d	; 13
 18e:	8f 7b       	andi	r24, 0xBF	; 191
 190:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1 << int6_SWITCH_PIN); //Enabling PULL-UP on the switch for INT0
 192:	8e b1       	in	r24, 0x0e	; 14
 194:	80 64       	ori	r24, 0x40	; 64
 196:	8e b9       	out	0x0e, r24	; 14
	
	DDRB &= ~(1 << DDB4); //*******Why does this line break the code*************
 198:	84 b1       	in	r24, 0x04	; 4
 19a:	8f 7e       	andi	r24, 0xEF	; 239
 19c:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1 << pcint4_SWITCH_PIN); //Enabling PULL-UP on the switch for PCINT0
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	80 61       	ori	r24, 0x10	; 16
 1a2:	85 b9       	out	0x05, r24	; 5
 1a4:	08 95       	ret

000001a6 <INTERRUPTS_init>:
}
void INTERRUPTS_init(void){
	
	EICRB |= (1 << ISC60);	// with ISC00 and ISC01 both set to 1, the rising edge of INT0 generates asynchronously an interrupt request
 1a6:	ea e6       	ldi	r30, 0x6A	; 106
 1a8:	f0 e0       	ldi	r31, 0x00	; 0
 1aa:	80 81       	ld	r24, Z
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	80 83       	st	Z, r24
							// When changing the ISCn1/ISCn0 bits, the interrupt must be disabled by clearing its Interrupt Enable bit
	EICRB |= (1 << ISC61);	// in the EIMSK Register. Otherwise an interrupt can occur when the bits are changed.
 1b0:	80 81       	ld	r24, Z
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	80 83       	st	Z, r24
	
	EIMSK |= (1 << int6_SWITCH_PIN);	// enables interrupt 6 (INT6)
 1b6:	8d b3       	in	r24, 0x1d	; 29
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	8d bb       	out	0x1d, r24	; 29
	
	// EIFR |= (1 << INTF0);	// Clearing the interrupt flag (The flag is also cleared when the interrupt routine is executed.)
	
	PCICR |= (1 << PCIE0);	// Enabling pin change interrupt 0 (PCICR0)
 1bc:	e8 e6       	ldi	r30, 0x68	; 104
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	80 83       	st	Z, r24
	
	PCMSK0 |= (1 << pcint4_SWITCH_PIN); //enables the Pin Change Interrupt (PB4)
 1c6:	eb e6       	ldi	r30, 0x6B	; 107
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	80 61       	ori	r24, 0x10	; 16
 1ce:	80 83       	st	Z, r24
	
	sei();					// sets global interrupts by writing a 1 to the I-bit (interrupt-bit) in the Status Register (SREG)
 1d0:	78 94       	sei
 1d2:	08 95       	ret

000001d4 <__vector_7>:
}

ISR (INT6_vect){
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	0b b6       	in	r0, 0x3b	; 59
 1e0:	0f 92       	push	r0
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	if (PINE & (1 << int6_SWITCH_PIN)){ //checks if the switch is pressed
 1fa:	66 9b       	sbis	0x0c, 6	; 12
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <__vector_7+0x44>
		green_LED_ON();
 1fe:	8b df       	rcall	.-234    	; 0x116 <green_LED_ON>
		red_LED_OFF();
 200:	7c df       	rcall	.-264    	; 0xfa <red_LED_OFF>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	81 ee       	ldi	r24, 0xE1	; 225
 206:	94 e0       	ldi	r25, 0x04	; 4
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <__vector_7+0x34>
 210:	00 c0       	rjmp	.+0      	; 0x212 <__vector_7+0x3e>
 212:	00 00       	nop
		_delay_ms(100);
		green_LED_OFF();
 214:	7a df       	rcall	.-268    	; 0x10a <green_LED_OFF>
 216:	71 df       	rcall	.-286    	; 0xfa <red_LED_OFF>
		red_LED_OFF();
 218:	ff 91       	pop	r31
 21a:	ef 91       	pop	r30
	}
}
 21c:	bf 91       	pop	r27
 21e:	af 91       	pop	r26
 220:	9f 91       	pop	r25
 222:	8f 91       	pop	r24
 224:	7f 91       	pop	r23
 226:	6f 91       	pop	r22
 228:	5f 91       	pop	r21
 22a:	4f 91       	pop	r20
 22c:	3f 91       	pop	r19
 22e:	2f 91       	pop	r18
 230:	0f 90       	pop	r0
 232:	0b be       	out	0x3b, r0	; 59
 234:	0f 90       	pop	r0
 236:	0f be       	out	0x3f, r0	; 63
 238:	0f 90       	pop	r0
 23a:	1f 90       	pop	r1
 23c:	18 95       	reti

0000023e <__vector_9>:
 23e:	1f 92       	push	r1
 240:	0f 92       	push	r0
ISR (PCINT0_vect){
 242:	0f b6       	in	r0, 0x3f	; 63
 244:	0f 92       	push	r0
 246:	11 24       	eor	r1, r1
 248:	0b b6       	in	r0, 0x3b	; 59
 24a:	0f 92       	push	r0
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	if (PINB & (1 << pcint4_SWITCH_PIN)){ //checks if the switch is pressed
 264:	1c 9b       	sbis	0x03, 4	; 3
 266:	0d c0       	rjmp	.+26     	; 0x282 <__vector_9+0x44>
		red_LED_ON();
 268:	4c df       	rcall	.-360    	; 0x102 <red_LED_ON>
		green_LED_OFF();
 26a:	4f df       	rcall	.-354    	; 0x10a <green_LED_OFF>
 26c:	2f ef       	ldi	r18, 0xFF	; 255
 26e:	81 ee       	ldi	r24, 0xE1	; 225
 270:	94 e0       	ldi	r25, 0x04	; 4
 272:	21 50       	subi	r18, 0x01	; 1
 274:	80 40       	sbci	r24, 0x00	; 0
 276:	90 40       	sbci	r25, 0x00	; 0
 278:	e1 f7       	brne	.-8      	; 0x272 <__vector_9+0x34>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <__vector_9+0x3e>
 27c:	00 00       	nop
		_delay_ms(100);
		red_LED_OFF();
 27e:	3d df       	rcall	.-390    	; 0xfa <red_LED_OFF>
 280:	44 df       	rcall	.-376    	; 0x10a <green_LED_OFF>
		green_LED_OFF();
 282:	ff 91       	pop	r31
 284:	ef 91       	pop	r30
	}
}
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	7f 91       	pop	r23
 290:	6f 91       	pop	r22
 292:	5f 91       	pop	r21
 294:	4f 91       	pop	r20
 296:	3f 91       	pop	r19
 298:	2f 91       	pop	r18
 29a:	0f 90       	pop	r0
 29c:	0b be       	out	0x3b, r0	; 59
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <main>:
 2a8:	68 df       	rcall	.-304    	; 0x17a <LED_init>
 2aa:	70 df       	rcall	.-288    	; 0x18c <SWITCH_init>

int main(void)
{
	LED_init();
	SWITCH_init();
	INTERRUPTS_init();
 2ac:	7c df       	rcall	.-264    	; 0x1a6 <INTERRUPTS_init>
	blink_Leds(500);
 2ae:	84 ef       	ldi	r24, 0xF4	; 244
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	37 df       	rcall	.-402    	; 0x122 <blink_Leds>
 2b4:	ff cf       	rjmp	.-2      	; 0x2b4 <main+0xc>

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
