
TB3216 Receive Control Commands.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800200  00000416  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000416  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011d8  00000000  00000000  0000067c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cff  00000000  00000000  00001854  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006d3  00000000  00000000  00002553  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000695  00000000  00000000  00002dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034e  00000000  00000000  00003455  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  000037a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	93 c1       	rjmp	.+806    	; 0x338 <__vector_4>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 e1       	ldi	r30, 0x16	; 22
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	aa 3e       	cpi	r26, 0xEA	; 234
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	44 d1       	rcall	.+648    	; 0x398 <main>
 110:	80 c1       	rjmp	.+768    	; 0x412 <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <LED_init>:
void INTERRUPTS_init(void);
void USART0_init(void);
void sleep_init(void);

void LED_init(void){
	DDRH |= (1 << DDH6);		//Setting data direction for red LED to "output"
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	80 81       	ld	r24, Z
 11a:	80 64       	ori	r24, 0x40	; 64
 11c:	80 83       	st	Z, r24
	DDRH |= (1 << DDH5);		//Setting data direction for green LED to "output"
 11e:	80 81       	ld	r24, Z
 120:	80 62       	ori	r24, 0x20	; 32
 122:	80 83       	st	Z, r24
 124:	08 95       	ret

00000126 <SWITCH_init>:
}
void SWITCH_init(void){
	DDRD &= ~(1 << DDD3);
 126:	8a b1       	in	r24, 0x0a	; 10
 128:	87 7f       	andi	r24, 0xF7	; 247
 12a:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << int_SWITCH_PIN); //Enabling PULL-UP on the switch for INT0
 12c:	8b b1       	in	r24, 0x0b	; 11
 12e:	88 60       	ori	r24, 0x08	; 8
 130:	8b b9       	out	0x0b, r24	; 11
	
	DDRE &= ~(1 << DDE7);
 132:	8d b1       	in	r24, 0x0d	; 13
 134:	8f 77       	andi	r24, 0x7F	; 127
 136:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1 << pcint_SWITCH_PIN); //Enabling PULL-UP on the switch for PCINT0
 138:	8e b1       	in	r24, 0x0e	; 14
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8e b9       	out	0x0e, r24	; 14
 13e:	08 95       	ret

00000140 <USART0_init>:
}
void USART0_init(void){
	UBRR0 = ((float)(F_CPU / (16 * (float)USART0_BAUD_RATE)) - 1);
 140:	87 e6       	ldi	r24, 0x67	; 103
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 148:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	DDRE &= ~(1 << DDE0);		// sets the data direction of RX to input
 14c:	8d b1       	in	r24, 0x0d	; 13
 14e:	8e 7f       	andi	r24, 0xFE	; 254
 150:	8d b9       	out	0x0d, r24	; 13
	UCSR0B |= (1 << RXEN0);		// Enable RX for USART0		
 152:	e1 ec       	ldi	r30, 0xC1	; 193
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	80 61       	ori	r24, 0x10	; 16
 15a:	80 83       	st	Z, r24
	DDRA |= (1 << DDA1);		//Set data direction to output on PA1
 15c:	81 b1       	in	r24, 0x01	; 1
 15e:	82 60       	ori	r24, 0x02	; 2
 160:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~(1 << PA1);		// Set PA1 to 0 (low) for RS232_00 USART0
 162:	82 b1       	in	r24, 0x02	; 2
 164:	8d 7f       	andi	r24, 0xFD	; 253
 166:	82 b9       	out	0x02, r24	; 2
		
	DDRE |= (1 << DDE1);		// sets the data direction of TX to output
 168:	8d b1       	in	r24, 0x0d	; 13
 16a:	82 60       	ori	r24, 0x02	; 2
 16c:	8d b9       	out	0x0d, r24	; 13
	UCSR0B |= (1 << TXEN0);		// Enable TX for USART0
 16e:	80 81       	ld	r24, Z
 170:	88 60       	ori	r24, 0x08	; 8
 172:	80 83       	st	Z, r24
	DDRA |= (1 << DDA2);		//Set data direction to output on PA2
 174:	81 b1       	in	r24, 0x01	; 1
 176:	84 60       	ori	r24, 0x04	; 4
 178:	81 b9       	out	0x01, r24	; 1
	PORTA |= (1 << PA2);		// Set PA2 to 1 (high) for RS232_01_02 USART0
 17a:	82 b1       	in	r24, 0x02	; 2
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	82 b9       	out	0x02, r24	; 2
 180:	08 95       	ret

00000182 <INTERRUPTS_init>:
}
void INTERRUPTS_init(void){
	
	EICRA |= (1 << ISC30);	// with ISC30 and ISC31 both set to 1, the rising edge of INT3 generates asynchronously an interrupt request
 182:	e9 e6       	ldi	r30, 0x69	; 105
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	80 64       	ori	r24, 0x40	; 64
 18a:	80 83       	st	Z, r24
							// When changing the ISCn1/ISCn0 bits, the interrupt must be disabled by clearing its Interrupt Enable bit
	EICRA |= (1 << ISC31);	// in the EIMSK Register. Otherwise an interrupt can occur when the bits are changed.
 18c:	80 81       	ld	r24, Z
 18e:	80 68       	ori	r24, 0x80	; 128
 190:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT3);	// enables interrupt 3 (INT6)
 192:	8d b3       	in	r24, 0x1d	; 29
 194:	88 60       	ori	r24, 0x08	; 8
 196:	8d bb       	out	0x1d, r24	; 29
	
	// EIFR |= (1 << INTF0);	// Clearing the interrupt flag (The flag is also cleared when the interrupt routine is executed.)
	
	PCICR |= (1 << PCIE0);	// Enabling pin change interrupt 0 (PCICR0)
 198:	e8 e6       	ldi	r30, 0x68	; 104
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	81 60       	ori	r24, 0x01	; 1
 1a0:	80 83       	st	Z, r24
	
	PCMSK0 |= (1 << pcint_SWITCH_PIN); //enables the Pin Change Interrupt (PB4)
 1a2:	eb e6       	ldi	r30, 0x6B	; 107
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	80 83       	st	Z, r24
	
	sei();					// sets global interrupts by writing a 1 to the I-bit (interrupt-bit) in the Status Register (SREG)
 1ac:	78 94       	sei
 1ae:	08 95       	ret

000001b0 <sleep_init>:
void sleep_init(void){
	/* SMCR &= ~(1 << SM0);		|
	SMCR |= (1 << SM1);			| This is bit manipulating the Sleep Mode Control Register to activate the "Power-Down" Sleep Code
	SMCR &= ~(1 << SM2);		|
	*/
	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // This is doing the same thing using a library
 1b0:	83 b7       	in	r24, 0x33	; 51
 1b2:	81 7f       	andi	r24, 0xF1	; 241
 1b4:	84 60       	ori	r24, 0x04	; 4
 1b6:	83 bf       	out	0x33, r24	; 51
 1b8:	08 95       	ret

000001ba <red_LED_OFF>:
}

void red_LED_OFF(){
	PORTH |= (1 << LEDR_PIN);
 1ba:	e2 e0       	ldi	r30, 0x02	; 2
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	80 81       	ld	r24, Z
 1c0:	80 64       	ori	r24, 0x40	; 64
 1c2:	80 83       	st	Z, r24
 1c4:	08 95       	ret

000001c6 <red_LED_ON>:
}
void red_LED_ON(){
	PORTH &= ~(1 << LEDR_PIN);
 1c6:	e2 e0       	ldi	r30, 0x02	; 2
 1c8:	f1 e0       	ldi	r31, 0x01	; 1
 1ca:	80 81       	ld	r24, Z
 1cc:	8f 7b       	andi	r24, 0xBF	; 191
 1ce:	80 83       	st	Z, r24
 1d0:	08 95       	ret

000001d2 <green_LED_OFF>:
}
void green_LED_OFF(){
	PORTH |= (1 << LEDG_PIN);
 1d2:	e2 e0       	ldi	r30, 0x02	; 2
 1d4:	f1 e0       	ldi	r31, 0x01	; 1
 1d6:	80 81       	ld	r24, Z
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	80 83       	st	Z, r24
 1dc:	08 95       	ret

000001de <green_LED_ON>:
}
void green_LED_ON(){
	PORTH &= ~(1 << LEDG_PIN);
 1de:	e2 e0       	ldi	r30, 0x02	; 2
 1e0:	f1 e0       	ldi	r31, 0x01	; 1
 1e2:	80 81       	ld	r24, Z
 1e4:	8f 7d       	andi	r24, 0xDF	; 223
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <blink_Leds>:
}
void blink_Leds(int x){
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	ec 01       	movw	r28, r24
	green_LED_ON(); // GREEN LED ON
 1f0:	f6 df       	rcall	.-20     	; 0x1de <green_LED_ON>
	red_LED_OFF(); // RED LED OFF
 1f2:	e3 df       	rcall	.-58     	; 0x1ba <red_LED_OFF>
 1f4:	20 e0       	ldi	r18, 0x00	; 0
	for (int i = 0; i < x; i++){
 1f6:	30 e0       	ldi	r19, 0x00	; 0
 1f8:	15 c0       	rjmp	.+42     	; 0x224 <blink_Leds+0x3a>
 1fa:	e2 e0       	ldi	r30, 0x02	; 2
		PORTH ^= (1 << LEDG_PIN); // GREEN LED ON
 1fc:	f1 e0       	ldi	r31, 0x01	; 1
 1fe:	90 81       	ld	r25, Z
 200:	80 e2       	ldi	r24, 0x20	; 32
 202:	89 27       	eor	r24, r25
 204:	80 83       	st	Z, r24
 206:	90 81       	ld	r25, Z
		PORTH ^= (1 << LEDR_PIN); // RED LED OFF
 208:	80 e4       	ldi	r24, 0x40	; 64
 20a:	89 27       	eor	r24, r25
 20c:	80 83       	st	Z, r24
 20e:	4f ef       	ldi	r20, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 210:	83 ec       	ldi	r24, 0xC3	; 195
 212:	99 e0       	ldi	r25, 0x09	; 9
 214:	41 50       	subi	r20, 0x01	; 1
 216:	80 40       	sbci	r24, 0x00	; 0
 218:	90 40       	sbci	r25, 0x00	; 0
 21a:	e1 f7       	brne	.-8      	; 0x214 <blink_Leds+0x2a>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <blink_Leds+0x34>
 21e:	00 00       	nop
 220:	2f 5f       	subi	r18, 0xFF	; 255
	PORTH &= ~(1 << LEDG_PIN);
}
void blink_Leds(int x){
	green_LED_ON(); // GREEN LED ON
	red_LED_OFF(); // RED LED OFF
	for (int i = 0; i < x; i++){
 222:	3f 4f       	sbci	r19, 0xFF	; 255
 224:	2c 17       	cp	r18, r28
 226:	3d 07       	cpc	r19, r29
 228:	44 f3       	brlt	.-48     	; 0x1fa <blink_Leds+0x10>
		PORTH ^= (1 << LEDG_PIN); // GREEN LED ON
		PORTH ^= (1 << LEDR_PIN); // RED LED OFF
		_delay_ms(200);
	}
	green_LED_ON();
 22a:	d9 df       	rcall	.-78     	; 0x1de <green_LED_ON>
 22c:	cc df       	rcall	.-104    	; 0x1c6 <red_LED_ON>
	red_LED_ON();
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
}
 232:	08 95       	ret

00000234 <USART0_sendChar>:
 234:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
void USART0_sendChar(char c){
	/*This next loop checks if the previous transmission is completed by checking the USARTn.STATUS register.
	This is done by polling the status register until the empty flag "STATUS.DREIF" is set.
	*/
	while (!(UCSR0A & (1 << UDRE0)))
 238:	95 ff       	sbrs	r25, 5
 23a:	fc cf       	rjmp	.-8      	; 0x234 <USART0_sendChar>
	{
		;
	}
	UDR0 = c;
 23c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 240:	08 95       	ret

00000242 <USART0_sendString>:
}
void USART0_sendString(char *str){
 242:	0f 93       	push	r16
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)	{
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	d0 e0       	ldi	r29, 0x00	; 0
 250:	06 c0       	rjmp	.+12     	; 0x25e <USART0_sendString+0x1c>
		USART0_sendChar(str[i]);
 252:	f8 01       	movw	r30, r16
 254:	ec 0f       	add	r30, r28
 256:	fd 1f       	adc	r31, r29
 258:	80 81       	ld	r24, Z
 25a:	ec df       	rcall	.-40     	; 0x234 <USART0_sendChar>
		;
	}
	UDR0 = c;
}
void USART0_sendString(char *str){
	for(size_t i = 0; i < strlen(str); i++)	{
 25c:	21 96       	adiw	r28, 0x01	; 1
 25e:	f8 01       	movw	r30, r16
 260:	01 90       	ld	r0, Z+
 262:	00 20       	and	r0, r0
 264:	e9 f7       	brne	.-6      	; 0x260 <USART0_sendString+0x1e>
 266:	31 97       	sbiw	r30, 0x01	; 1
 268:	e0 1b       	sub	r30, r16
 26a:	f1 0b       	sbc	r31, r17
 26c:	ce 17       	cp	r28, r30
 26e:	df 07       	cpc	r29, r31
 270:	80 f3       	brcs	.-32     	; 0x252 <USART0_sendString+0x10>
		USART0_sendChar(str[i]);
	}
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <USART0_read>:
char USART0_read(void){
	while (!(UCSR0A & (1 << RXC0)))
 27c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 280:	88 23       	and	r24, r24
 282:	e4 f7       	brge	.-8      	; 0x27c <USART0_read>
	{
		;
	}
	return UDR0;
 284:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 288:	08 95       	ret

0000028a <execute>:
void execute(char *command)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	ec 01       	movw	r28, r24
	if(strcmp(command, "rON") == 0){
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	72 e0       	ldi	r23, 0x02	; 2
 294:	b5 d0       	rcall	.+362    	; 0x400 <strcmp>
 296:	89 2b       	or	r24, r25
 298:	29 f4       	brne	.+10     	; 0x2a4 <execute+0x1a>
		USART0_sendString("Red LED is now ON.\r\n");
 29a:	84 e0       	ldi	r24, 0x04	; 4
 29c:	92 e0       	ldi	r25, 0x02	; 2
		red_LED_ON();
 29e:	d1 df       	rcall	.-94     	; 0x242 <USART0_sendString>
 2a0:	92 df       	rcall	.-220    	; 0x1c6 <red_LED_ON>
 2a2:	47 c0       	rjmp	.+142    	; 0x332 <execute+0xa8>
	}
	else if (strcmp(command, "rOFF") == 0){
 2a4:	69 e1       	ldi	r22, 0x19	; 25
 2a6:	72 e0       	ldi	r23, 0x02	; 2
 2a8:	ce 01       	movw	r24, r28
 2aa:	aa d0       	rcall	.+340    	; 0x400 <strcmp>
 2ac:	89 2b       	or	r24, r25
		USART0_sendString("Red LED is now OFF.\r\n");
 2ae:	29 f4       	brne	.+10     	; 0x2ba <execute+0x30>
 2b0:	8e e1       	ldi	r24, 0x1E	; 30
 2b2:	92 e0       	ldi	r25, 0x02	; 2
 2b4:	c6 df       	rcall	.-116    	; 0x242 <USART0_sendString>
		red_LED_OFF();
 2b6:	81 df       	rcall	.-254    	; 0x1ba <red_LED_OFF>
 2b8:	3c c0       	rjmp	.+120    	; 0x332 <execute+0xa8>
		}else if (strcmp(command, "gON") == 0){
 2ba:	64 e3       	ldi	r22, 0x34	; 52
 2bc:	72 e0       	ldi	r23, 0x02	; 2
 2be:	ce 01       	movw	r24, r28
 2c0:	9f d0       	rcall	.+318    	; 0x400 <strcmp>
 2c2:	89 2b       	or	r24, r25
		USART0_sendString("Green LED is now ON.\r\n");
 2c4:	29 f4       	brne	.+10     	; 0x2d0 <execute+0x46>
 2c6:	88 e3       	ldi	r24, 0x38	; 56
 2c8:	92 e0       	ldi	r25, 0x02	; 2
		green_LED_ON();
 2ca:	bb df       	rcall	.-138    	; 0x242 <USART0_sendString>
 2cc:	88 df       	rcall	.-240    	; 0x1de <green_LED_ON>
		} else if (strcmp(command, "gOFF") == 0){
 2ce:	31 c0       	rjmp	.+98     	; 0x332 <execute+0xa8>
 2d0:	6f e4       	ldi	r22, 0x4F	; 79
 2d2:	72 e0       	ldi	r23, 0x02	; 2
 2d4:	ce 01       	movw	r24, r28
 2d6:	94 d0       	rcall	.+296    	; 0x400 <strcmp>
		USART0_sendString("Green LED is now OFF.\r\n");
 2d8:	89 2b       	or	r24, r25
 2da:	29 f4       	brne	.+10     	; 0x2e6 <execute+0x5c>
 2dc:	84 e5       	ldi	r24, 0x54	; 84
		green_LED_OFF();
 2de:	92 e0       	ldi	r25, 0x02	; 2
 2e0:	b0 df       	rcall	.-160    	; 0x242 <USART0_sendString>
		} else if (strcmp(command, "blink") == 0){
 2e2:	77 df       	rcall	.-274    	; 0x1d2 <green_LED_OFF>
 2e4:	26 c0       	rjmp	.+76     	; 0x332 <execute+0xa8>
 2e6:	6c e6       	ldi	r22, 0x6C	; 108
 2e8:	72 e0       	ldi	r23, 0x02	; 2
 2ea:	ce 01       	movw	r24, r28
 2ec:	89 d0       	rcall	.+274    	; 0x400 <strcmp>
		USART0_sendString("Green LED and Red LED are now blinking.\r\n");
 2ee:	89 2b       	or	r24, r25
 2f0:	39 f4       	brne	.+14     	; 0x300 <execute+0x76>
 2f2:	82 e7       	ldi	r24, 0x72	; 114
		blink_Leds(20);
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	a5 df       	rcall	.-182    	; 0x242 <USART0_sendString>
 2f8:	84 e1       	ldi	r24, 0x14	; 20
		} else if (strcmp(command, "sleep") == 0){
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	76 df       	rcall	.-276    	; 0x1ea <blink_Leds>
 2fe:	19 c0       	rjmp	.+50     	; 0x332 <execute+0xa8>
 300:	6c e9       	ldi	r22, 0x9C	; 156
 302:	72 e0       	ldi	r23, 0x02	; 2
 304:	ce 01       	movw	r24, r28
 306:	7c d0       	rcall	.+248    	; 0x400 <strcmp>
		USART0_sendString("Device in sleep mode.\r\n");
 308:	89 2b       	or	r24, r25
 30a:	81 f4       	brne	.+32     	; 0x32c <execute+0xa2>
 30c:	82 ea       	ldi	r24, 0xA2	; 162
		blink_Leds(3);
 30e:	92 e0       	ldi	r25, 0x02	; 2
 310:	98 df       	rcall	.-208    	; 0x242 <USART0_sendString>
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	90 e0       	ldi	r25, 0x00	; 0
		red_LED_OFF();
 316:	69 df       	rcall	.-302    	; 0x1ea <blink_Leds>
 318:	50 df       	rcall	.-352    	; 0x1ba <red_LED_OFF>
		green_LED_OFF();
 31a:	5b df       	rcall	.-330    	; 0x1d2 <green_LED_OFF>
 31c:	83 b7       	in	r24, 0x33	; 51
		sleep_mode();
 31e:	81 60       	ori	r24, 0x01	; 1
 320:	83 bf       	out	0x33, r24	; 51
 322:	88 95       	sleep
 324:	83 b7       	in	r24, 0x33	; 51
 326:	8e 7f       	andi	r24, 0xFE	; 254
 328:	83 bf       	out	0x33, r24	; 51
 32a:	03 c0       	rjmp	.+6      	; 0x332 <execute+0xa8>
 32c:	8a eb       	ldi	r24, 0xBA	; 186
		}else{
		USART0_sendString("Your Command is undefined.\r\n");
 32e:	92 e0       	ldi	r25, 0x02	; 2
 330:	88 df       	rcall	.-240    	; 0x242 <USART0_sendString>
 332:	df 91       	pop	r29
 334:	cf 91       	pop	r28
	}
}
 336:	08 95       	ret

00000338 <__vector_4>:
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0

ISR (INT3_vect){
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	0b b6       	in	r0, 0x3b	; 59
 344:	0f 92       	push	r0
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	if ((PIND & (1 << int_SWITCH_PIN))){
 35e:	4b 9b       	sbis	0x09, 3	; 9
 360:	08 c0       	rjmp	.+16     	; 0x372 <__vector_4+0x3a>
		//sleep_disable();
		USART0_sendString("Device is awake.\r\n");
 362:	87 ed       	ldi	r24, 0xD7	; 215
 364:	92 e0       	ldi	r25, 0x02	; 2
 366:	6d df       	rcall	.-294    	; 0x242 <USART0_sendString>
		blink_Leds(5);
 368:	85 e0       	ldi	r24, 0x05	; 5
 36a:	90 e0       	ldi	r25, 0x00	; 0
		green_LED_ON();
 36c:	3e df       	rcall	.-388    	; 0x1ea <blink_Leds>
 36e:	37 df       	rcall	.-402    	; 0x1de <green_LED_ON>
		red_LED_ON();
 370:	2a df       	rcall	.-428    	; 0x1c6 <red_LED_ON>
 372:	ff 91       	pop	r31
	}
}
 374:	ef 91       	pop	r30
 376:	bf 91       	pop	r27
 378:	af 91       	pop	r26
 37a:	9f 91       	pop	r25
 37c:	8f 91       	pop	r24
 37e:	7f 91       	pop	r23
 380:	6f 91       	pop	r22
 382:	5f 91       	pop	r21
 384:	4f 91       	pop	r20
 386:	3f 91       	pop	r19
 388:	2f 91       	pop	r18
 38a:	0f 90       	pop	r0
 38c:	0b be       	out	0x3b, r0	; 59
 38e:	0f 90       	pop	r0
 390:	0f be       	out	0x3f, r0	; 63
 392:	0f 90       	pop	r0
 394:	1f 90       	pop	r1
 396:	18 95       	reti

00000398 <main>:
 398:	cf 93       	push	r28

int main(void)
{
 39a:	df 93       	push	r29
 39c:	cd b7       	in	r28, 0x3d	; 61
 39e:	de b7       	in	r29, 0x3e	; 62
 3a0:	28 97       	sbiw	r28, 0x08	; 8
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
	
	char command[8];
	int index = 0;
	char c;
	INTERRUPTS_init();
 3ac:	ea de       	rcall	.-556    	; 0x182 <INTERRUPTS_init>
	USART0_init();
 3ae:	c8 de       	rcall	.-624    	; 0x140 <USART0_init>
	LED_init();
 3b0:	b1 de       	rcall	.-670    	; 0x114 <LED_init>
	SWITCH_init();
 3b2:	b9 de       	rcall	.-654    	; 0x126 <SWITCH_init>
	sleep_init();
 3b4:	fd de       	rcall	.-518    	; 0x1b0 <sleep_init>
 3b6:	00 e0       	ldi	r16, 0x00	; 0
		red_LED_ON();
	}
}

int main(void)
{
 3b8:	10 e0       	ldi	r17, 0x00	; 0
 3ba:	60 df       	rcall	.-320    	; 0x27c <USART0_read>
	LED_init();
	SWITCH_init();
	sleep_init();
    while (1) 
    {
		c = USART0_read();
 3bc:	8a 30       	cpi	r24, 0x0A	; 10
 3be:	99 f0       	breq	.+38     	; 0x3e6 <main+0x4e>
		if (c != '\n' && c !='\r'){
 3c0:	8d 30       	cpi	r24, 0x0D	; 13
 3c2:	89 f0       	breq	.+34     	; 0x3e6 <main+0x4e>
 3c4:	98 01       	movw	r18, r16
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
			command[index++] = c;
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	e1 e0       	ldi	r30, 0x01	; 1
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ec 0f       	add	r30, r28
 3d0:	fd 1f       	adc	r31, r29
 3d2:	e0 0f       	add	r30, r16
 3d4:	f1 1f       	adc	r31, r17
 3d6:	80 83       	st	Z, r24
 3d8:	29 30       	cpi	r18, 0x09	; 9
 3da:	31 05       	cpc	r19, r1
			if (index > 8){
 3dc:	14 f4       	brge	.+4      	; 0x3e2 <main+0x4a>
 3de:	89 01       	movw	r16, r18
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <main+0x4e>
	sleep_init();
    while (1) 
    {
		c = USART0_read();
		if (c != '\n' && c !='\r'){
			command[index++] = c;
 3e2:	00 e0       	ldi	r16, 0x00	; 0
 3e4:	10 e0       	ldi	r17, 0x00	; 0
			if (index > 8){
				index = 0;
 3e6:	8a 30       	cpi	r24, 0x0A	; 10
 3e8:	41 f7       	brne	.-48     	; 0x3ba <main+0x22>
			}
		}
		if (c == '\n'){
 3ea:	e1 e0       	ldi	r30, 0x01	; 1
 3ec:	f0 e0       	ldi	r31, 0x00	; 0
			command[index] = '\0';
 3ee:	ec 0f       	add	r30, r28
 3f0:	fd 1f       	adc	r31, r29
 3f2:	e0 0f       	add	r30, r16
 3f4:	f1 1f       	adc	r31, r17
 3f6:	10 82       	st	Z, r1
 3f8:	ce 01       	movw	r24, r28
			index = 0;
			execute(command);
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	46 df       	rcall	.-372    	; 0x28a <execute>
 3fe:	db cf       	rjmp	.-74     	; 0x3b6 <main+0x1e>

00000400 <strcmp>:
 400:	fb 01       	movw	r30, r22
 402:	dc 01       	movw	r26, r24
 404:	8d 91       	ld	r24, X+
 406:	01 90       	ld	r0, Z+
 408:	80 19       	sub	r24, r0
 40a:	01 10       	cpse	r0, r1
 40c:	d9 f3       	breq	.-10     	; 0x404 <strcmp+0x4>
 40e:	99 0b       	sbc	r25, r25
 410:	08 95       	ret

00000412 <_exit>:
 412:	f8 94       	cli

00000414 <__stop_program>:
 414:	ff cf       	rjmp	.-2      	; 0x414 <__stop_program>
