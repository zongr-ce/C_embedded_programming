
TB3216 Receive Control Commands.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800200  00000542  000005b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000542  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000676  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011ae  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cff  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000816  00000000  00000000  0000263d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b8  00000000  00000000  00002e54  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006d5  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034e  00000000  00000000  000036e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003a2f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	2d c2       	rjmp	.+1114   	; 0x46c <__vector_4>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e4       	ldi	r30, 0x42	; 66
  fc:	f5 e0       	ldi	r31, 0x05	; 5
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 3c       	cpi	r26, 0xC0	; 192
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	d9 d1       	rcall	.+946    	; 0x4c2 <main>
 110:	16 c2       	rjmp	.+1068   	; 0x53e <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <sys_disable>:
void INTERRUPTS_init(void);
void USART0_init(void);
void sleep_init(void);

void sys_disable(){
	DDRC |= (1 << DDC0) |(1 << DDC1) |(1 << DDC2) |(1 << DDC3) |(1 << DDC4) |(1 << DDC5) |(1 << DDC6) |(1 << DDC7);
 114:	87 b1       	in	r24, 0x07	; 7
 116:	8f ef       	ldi	r24, 0xFF	; 255
 118:	87 b9       	out	0x07, r24	; 7
	DDRF |= (1 << DDF4) |(1 << DDF5) |(1 << DDF6);
 11a:	80 b3       	in	r24, 0x10	; 16
 11c:	80 67       	ori	r24, 0x70	; 112
 11e:	80 bb       	out	0x10, r24	; 16
	DDRG |= (1 << DDG1) |(1 << DDG0);
 120:	83 b3       	in	r24, 0x13	; 19
 122:	83 60       	ori	r24, 0x03	; 3
 124:	83 bb       	out	0x13, r24	; 19
	DDRA |= (1 << DDA2) |(1 << DDA1) |(1 << DDA0);
 126:	81 b1       	in	r24, 0x01	; 1
 128:	87 60       	ori	r24, 0x07	; 7
 12a:	81 b9       	out	0x01, r24	; 1
	DDRH |= (1 << DDH2) |(1 << DDH3) |(1 << DDH4);
 12c:	e1 e0       	ldi	r30, 0x01	; 1
 12e:	f1 e0       	ldi	r31, 0x01	; 1
 130:	80 81       	ld	r24, Z
 132:	8c 61       	ori	r24, 0x1C	; 28
 134:	80 83       	st	Z, r24
	
	UCSR0B &= ~(1 << RXEN0);		// Disable RX for USART0
 136:	e1 ec       	ldi	r30, 0xC1	; 193
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	80 83       	st	Z, r24
	UCSR0B &= ~(1 << TXEN0);		// Disable TX for USART0
 140:	80 81       	ld	r24, Z
 142:	87 7f       	andi	r24, 0xF7	; 247
 144:	80 83       	st	Z, r24
	
	
	// DISABLE THE SDI12 INTERFACES
	PORTH |= (1 << PH2);
 146:	e2 e0       	ldi	r30, 0x02	; 2
 148:	f1 e0       	ldi	r31, 0x01	; 1
 14a:	80 81       	ld	r24, Z
 14c:	84 60       	ori	r24, 0x04	; 4
 14e:	80 83       	st	Z, r24
	PORTH &= ~(1 << PH3);
 150:	80 81       	ld	r24, Z
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	80 83       	st	Z, r24
	PORTH |= (1 << PH4);
 156:	80 81       	ld	r24, Z
 158:	80 61       	ori	r24, 0x10	; 16
 15a:	80 83       	st	Z, r24
	
	PORTA |= (1 << PA0);						// DISABLE_RS232_00
 15c:	82 b1       	in	r24, 0x02	; 2
 15e:	81 60       	ori	r24, 0x01	; 1
 160:	82 b9       	out	0x02, r24	; 2
	PORTA |= (1 << PA1);						// SHUTDOWN_RS232_00
 162:	82 b1       	in	r24, 0x02	; 2
 164:	82 60       	ori	r24, 0x02	; 2
 166:	82 b9       	out	0x02, r24	; 2
	PORTA &= ~(1 << PA2);						// SHUTDOWN_RS232_01_02 (TX MODULE)
 168:	82 b1       	in	r24, 0x02	; 2
 16a:	8b 7f       	andi	r24, 0xFB	; 251
 16c:	82 b9       	out	0x02, r24	; 2
	PORTC &= ~(1 << PC0);						// DISABLE MODEM SWITCH
 16e:	88 b1       	in	r24, 0x08	; 8
 170:	8e 7f       	andi	r24, 0xFE	; 254
 172:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC1);						// DISABLE 2.1V POWER
 174:	88 b1       	in	r24, 0x08	; 8
 176:	8d 7f       	andi	r24, 0xFD	; 253
 178:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PC2);						// DISABLE TEMP_LOCAL initially enabled
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	84 60       	ori	r24, 0x04	; 4
 17e:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PC3);						// DISABLE BARO
 180:	88 b1       	in	r24, 0x08	; 8
 182:	88 60       	ori	r24, 0x08	; 8
 184:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PC4);						// DISABLE WIND 01
 186:	88 b1       	in	r24, 0x08	; 8
 188:	80 61       	ori	r24, 0x10	; 16
 18a:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PC5);						// DISABLE WIND 02
 18c:	88 b1       	in	r24, 0x08	; 8
 18e:	80 62       	ori	r24, 0x20	; 32
 190:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PC6);						// DISABLE VTRAN_01
 192:	88 b1       	in	r24, 0x08	; 8
 194:	80 64       	ori	r24, 0x40	; 64
 196:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC7);						// DISABLE MUX
 198:	88 b1       	in	r24, 0x08	; 8
 19a:	8f 77       	andi	r24, 0x7F	; 127
 19c:	88 b9       	out	0x08, r24	; 8
	PORTG &= ~(1 << PG0);						// DISABLE VTRAN_03
 19e:	84 b3       	in	r24, 0x14	; 20
 1a0:	8e 7f       	andi	r24, 0xFE	; 254
 1a2:	84 bb       	out	0x14, r24	; 20
	PORTG &= ~(1 << PG1);						// DISABLE VTRAN_02
 1a4:	84 b3       	in	r24, 0x14	; 20
 1a6:	8d 7f       	andi	r24, 0xFD	; 253
 1a8:	84 bb       	out	0x14, r24	; 20
	PORTF |= (1 << PF4);						// DISABLE ADC_01 +5V SWITCH
 1aa:	81 b3       	in	r24, 0x11	; 17
 1ac:	80 61       	ori	r24, 0x10	; 16
 1ae:	81 bb       	out	0x11, r24	; 17
	PORTF |= (1 << PF5);						// DISABLE ADC_02 +5V SWITCH
 1b0:	81 b3       	in	r24, 0x11	; 17
 1b2:	80 62       	ori	r24, 0x20	; 32
 1b4:	81 bb       	out	0x11, r24	; 17
	PORTF |= (1 << PF6);						// DISABLE ADC_03 +5V SWITCH
 1b6:	81 b3       	in	r24, 0x11	; 17
 1b8:	80 64       	ori	r24, 0x40	; 64
 1ba:	81 bb       	out	0x11, r24	; 17
 1bc:	08 95       	ret

000001be <sys_enable>:
}
void sys_enable(){
	DDRC |= (1 << DDC0) |(1 << DDC1) |(1 << DDC2) |(1 << DDC3) |(1 << DDC4) |(1 << DDC5) |(1 << DDC6) |(1 << DDC7);
 1be:	87 b1       	in	r24, 0x07	; 7
 1c0:	8f ef       	ldi	r24, 0xFF	; 255
 1c2:	87 b9       	out	0x07, r24	; 7
	DDRF |= (1 << DDF4) |(1 << DDF5) |(1 << DDF6);
 1c4:	80 b3       	in	r24, 0x10	; 16
 1c6:	80 67       	ori	r24, 0x70	; 112
 1c8:	80 bb       	out	0x10, r24	; 16
	DDRG |= (1 << DDG1) |(1 << DDG0);
 1ca:	83 b3       	in	r24, 0x13	; 19
 1cc:	83 60       	ori	r24, 0x03	; 3
 1ce:	83 bb       	out	0x13, r24	; 19
	DDRA |= (1 << DDA2) |(1 << DDA1) |(1 << DDA0);
 1d0:	81 b1       	in	r24, 0x01	; 1
 1d2:	87 60       	ori	r24, 0x07	; 7
 1d4:	81 b9       	out	0x01, r24	; 1
	DDRH |= (1 << DDH2) |(1 << DDH3) |(1 << DDH4);
 1d6:	e1 e0       	ldi	r30, 0x01	; 1
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	80 81       	ld	r24, Z
 1dc:	8c 61       	ori	r24, 0x1C	; 28
 1de:	80 83       	st	Z, r24
	
	UCSR0B |= (1 << RXEN0);		// Disable RX for USART0
 1e0:	e1 ec       	ldi	r30, 0xC1	; 193
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 61       	ori	r24, 0x10	; 16
 1e8:	80 83       	st	Z, r24
	UCSR0B |= (1 << TXEN0);		// Disable TX for USART0
 1ea:	80 81       	ld	r24, Z
 1ec:	88 60       	ori	r24, 0x08	; 8
 1ee:	80 83       	st	Z, r24
	
	// ENABLE THE SDI12 INTERFACES
	PORTH &= ~(1 << PH2);
 1f0:	e2 e0       	ldi	r30, 0x02	; 2
 1f2:	f1 e0       	ldi	r31, 0x01	; 1
 1f4:	80 81       	ld	r24, Z
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	80 83       	st	Z, r24
	PORTH |= (1 << PH3);
 1fa:	80 81       	ld	r24, Z
 1fc:	88 60       	ori	r24, 0x08	; 8
 1fe:	80 83       	st	Z, r24
	PORTH &= ~(1 << PH4);
 200:	80 81       	ld	r24, Z
 202:	8f 7e       	andi	r24, 0xEF	; 239
 204:	80 83       	st	Z, r24
	
	PORTA &= ~(1 << PA0);						// ENABLE_RS232_00
 206:	82 b1       	in	r24, 0x02	; 2
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	82 b9       	out	0x02, r24	; 2
	PORTA &= ~(1 << PA1);						// DISABLE_SHUTDOWN_RS232_00
 20c:	82 b1       	in	r24, 0x02	; 2
 20e:	8d 7f       	andi	r24, 0xFD	; 253
 210:	82 b9       	out	0x02, r24	; 2
	PORTA |= (1 << PA2);						// DISABLE_SHUTDOWN_RS232_01_02 (TX MODULE)
 212:	82 b1       	in	r24, 0x02	; 2
 214:	84 60       	ori	r24, 0x04	; 4
 216:	82 b9       	out	0x02, r24	; 2
	PORTC |= (1 << PC0);						// ENABLE MODEM SWITCH
 218:	88 b1       	in	r24, 0x08	; 8
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PC1);						// ENABLE 2.1V POWER
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	82 60       	ori	r24, 0x02	; 2
 222:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC2);						// ENABLE TEMP_LOCAL initially enabled
 224:	88 b1       	in	r24, 0x08	; 8
 226:	8b 7f       	andi	r24, 0xFB	; 251
 228:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC3);						// ENABLE BARO
 22a:	88 b1       	in	r24, 0x08	; 8
 22c:	87 7f       	andi	r24, 0xF7	; 247
 22e:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC4);						// ENABLE WIND 01
 230:	88 b1       	in	r24, 0x08	; 8
 232:	8f 7e       	andi	r24, 0xEF	; 239
 234:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC5);						// ENABLE WIND 02
 236:	88 b1       	in	r24, 0x08	; 8
 238:	8f 7d       	andi	r24, 0xDF	; 223
 23a:	88 b9       	out	0x08, r24	; 8
	PORTC &= ~(1 << PC6);						// ENABLE VTRAN_01
 23c:	88 b1       	in	r24, 0x08	; 8
 23e:	8f 7b       	andi	r24, 0xBF	; 191
 240:	88 b9       	out	0x08, r24	; 8
	PORTC |= (1 << PC7);						// ENABLE MUX
 242:	88 b1       	in	r24, 0x08	; 8
 244:	80 68       	ori	r24, 0x80	; 128
 246:	88 b9       	out	0x08, r24	; 8
	PORTG |= (1 << PG0);						// ENABLE VTRAN_03
 248:	84 b3       	in	r24, 0x14	; 20
 24a:	81 60       	ori	r24, 0x01	; 1
 24c:	84 bb       	out	0x14, r24	; 20
	PORTG |= (1 << PG1);						// ENABLE VTRAN_02
 24e:	84 b3       	in	r24, 0x14	; 20
 250:	82 60       	ori	r24, 0x02	; 2
 252:	84 bb       	out	0x14, r24	; 20
	PORTF &= ~(1 << PF4);						// ENABLE ADC_01 +5V SWITCH
 254:	81 b3       	in	r24, 0x11	; 17
 256:	8f 7e       	andi	r24, 0xEF	; 239
 258:	81 bb       	out	0x11, r24	; 17
	PORTF &= ~(1 << PF5);						// ENABLE ADC_02 +5V SWITCH
 25a:	81 b3       	in	r24, 0x11	; 17
 25c:	8f 7d       	andi	r24, 0xDF	; 223
 25e:	81 bb       	out	0x11, r24	; 17
	PORTF &= ~(1 << PF6);						// ENABLE ADC_03 +5V SWITCH
 260:	81 b3       	in	r24, 0x11	; 17
 262:	8f 7b       	andi	r24, 0xBF	; 191
 264:	81 bb       	out	0x11, r24	; 17
 266:	08 95       	ret

00000268 <LED_init>:
}

void LED_init(void){
	DDRH |= (1 << DDH6);		//Setting data direction for red LED to "output"
 268:	e1 e0       	ldi	r30, 0x01	; 1
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	80 81       	ld	r24, Z
 26e:	80 64       	ori	r24, 0x40	; 64
 270:	80 83       	st	Z, r24
	DDRH |= (1 << DDH5);		//Setting data direction for green LED to "output"
 272:	80 81       	ld	r24, Z
 274:	80 62       	ori	r24, 0x20	; 32
 276:	80 83       	st	Z, r24
 278:	08 95       	ret

0000027a <SWITCH_init>:
}
void SWITCH_init(void){
	DDRD &= ~(1 << DDD3);
 27a:	8a b1       	in	r24, 0x0a	; 10
 27c:	87 7f       	andi	r24, 0xF7	; 247
 27e:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1 << int_SWITCH_PIN); //Enabling PULL-UP on the switch for INT0
 280:	8b b1       	in	r24, 0x0b	; 11
 282:	88 60       	ori	r24, 0x08	; 8
 284:	8b b9       	out	0x0b, r24	; 11
	DDRE &= ~(1 << DDE7);
 286:	8d b1       	in	r24, 0x0d	; 13
 288:	8f 77       	andi	r24, 0x7F	; 127
 28a:	8d b9       	out	0x0d, r24	; 13
	PORTE |= (1 << sleep_switch_pin); //Enabling PULL-UP on the sleep switch
 28c:	8e b1       	in	r24, 0x0e	; 14
 28e:	80 68       	ori	r24, 0x80	; 128
 290:	8e b9       	out	0x0e, r24	; 14
 292:	08 95       	ret

00000294 <USART0_init>:
}
void USART0_init(void){
	UBRR0 = ((float)(F_CPU / (16 * (float)USART0_BAUD_RATE)) - 1);
 294:	87 e6       	ldi	r24, 0x67	; 103
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
 29c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	DDRE &= ~(1 << DDE0);		// sets the data direction of RX to input
 2a0:	8d b1       	in	r24, 0x0d	; 13
 2a2:	8e 7f       	andi	r24, 0xFE	; 254
 2a4:	8d b9       	out	0x0d, r24	; 13
	UCSR0B |= (1 << RXEN0);		// Enable RX for USART0		
 2a6:	e1 ec       	ldi	r30, 0xC1	; 193
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	80 81       	ld	r24, Z
 2ac:	80 61       	ori	r24, 0x10	; 16
 2ae:	80 83       	st	Z, r24
	DDRA |= (1 << DDA1);		//Set data direction to output on PA1
 2b0:	81 b1       	in	r24, 0x01	; 1
 2b2:	82 60       	ori	r24, 0x02	; 2
 2b4:	81 b9       	out	0x01, r24	; 1
	PORTA &= ~(1 << PA1);		// Set PA1 to 0 (low) for RS232_00 USART0
 2b6:	82 b1       	in	r24, 0x02	; 2
 2b8:	8d 7f       	andi	r24, 0xFD	; 253
 2ba:	82 b9       	out	0x02, r24	; 2
		
	DDRE |= (1 << DDE1);		// sets the data direction of TX to output
 2bc:	8d b1       	in	r24, 0x0d	; 13
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	8d b9       	out	0x0d, r24	; 13
	UCSR0B |= (1 << TXEN0);		// Enable TX for USART0
 2c2:	80 81       	ld	r24, Z
 2c4:	88 60       	ori	r24, 0x08	; 8
 2c6:	80 83       	st	Z, r24
	DDRA |= (1 << DDA2);		//Set data direction to output on PA2
 2c8:	81 b1       	in	r24, 0x01	; 1
 2ca:	84 60       	ori	r24, 0x04	; 4
 2cc:	81 b9       	out	0x01, r24	; 1
	PORTA |= (1 << PA2);		// Set PA2 to 1 (high) for RS232_01_02 USART0
 2ce:	82 b1       	in	r24, 0x02	; 2
 2d0:	84 60       	ori	r24, 0x04	; 4
 2d2:	82 b9       	out	0x02, r24	; 2
 2d4:	08 95       	ret

000002d6 <INTERRUPTS_init>:
}
void INTERRUPTS_init(void){
	
	EICRA |= (1 << ISC30);	// with ISC30 and ISC31 both set to 1, the rising edge of INT3 generates asynchronously an interrupt request
 2d6:	e9 e6       	ldi	r30, 0x69	; 105
 2d8:	f0 e0       	ldi	r31, 0x00	; 0
 2da:	80 81       	ld	r24, Z
 2dc:	80 64       	ori	r24, 0x40	; 64
 2de:	80 83       	st	Z, r24
							// When changing the ISCn1/ISCn0 bits, the interrupt must be disabled by clearing its Interrupt Enable bit
	EICRA |= (1 << ISC31);	// in the EIMSK Register. Otherwise an interrupt can occur when the bits are changed.
 2e0:	80 81       	ld	r24, Z
 2e2:	80 68       	ori	r24, 0x80	; 128
 2e4:	80 83       	st	Z, r24
	
	EIMSK |= (1 << INT3);	// enables interrupt 3 (INT3)
 2e6:	8d b3       	in	r24, 0x1d	; 29
 2e8:	88 60       	ori	r24, 0x08	; 8
 2ea:	8d bb       	out	0x1d, r24	; 29
 2ec:	08 95       	ret

000002ee <sleep_init>:
void sleep_init(void){
	/* SMCR &= ~(1 << SM0);		|
	SMCR |= (1 << SM1);			| This is bit manipulating the Sleep Mode Control Register to activate the "Power-Down" Sleep Code
	SMCR &= ~(1 << SM2);		|
	*/
	set_sleep_mode(SLEEP_MODE_PWR_DOWN); // This is doing the same thing using a library
 2ee:	83 b7       	in	r24, 0x33	; 51
 2f0:	81 7f       	andi	r24, 0xF1	; 241
 2f2:	84 60       	ori	r24, 0x04	; 4
 2f4:	83 bf       	out	0x33, r24	; 51
 2f6:	08 95       	ret

000002f8 <red_LED_OFF>:
}

void red_LED_OFF(){
	PORTH |= (1 << LEDR_PIN);
 2f8:	e2 e0       	ldi	r30, 0x02	; 2
 2fa:	f1 e0       	ldi	r31, 0x01	; 1
 2fc:	80 81       	ld	r24, Z
 2fe:	80 64       	ori	r24, 0x40	; 64
 300:	80 83       	st	Z, r24
 302:	08 95       	ret

00000304 <red_LED_ON>:
}
void red_LED_ON(){
	PORTH &= ~(1 << LEDR_PIN);
 304:	e2 e0       	ldi	r30, 0x02	; 2
 306:	f1 e0       	ldi	r31, 0x01	; 1
 308:	80 81       	ld	r24, Z
 30a:	8f 7b       	andi	r24, 0xBF	; 191
 30c:	80 83       	st	Z, r24
 30e:	08 95       	ret

00000310 <green_LED_OFF>:
}
void green_LED_OFF(){
	PORTH |= (1 << LEDG_PIN);
 310:	e2 e0       	ldi	r30, 0x02	; 2
 312:	f1 e0       	ldi	r31, 0x01	; 1
 314:	80 81       	ld	r24, Z
 316:	80 62       	ori	r24, 0x20	; 32
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <green_LED_ON>:
}
void green_LED_ON(){
	PORTH &= ~(1 << LEDG_PIN);
 31c:	e2 e0       	ldi	r30, 0x02	; 2
 31e:	f1 e0       	ldi	r31, 0x01	; 1
 320:	80 81       	ld	r24, Z
 322:	8f 7d       	andi	r24, 0xDF	; 223
 324:	80 83       	st	Z, r24
 326:	08 95       	ret

00000328 <blink_Leds>:
}
void blink_Leds(int x){
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	ec 01       	movw	r28, r24
	green_LED_ON(); // GREEN LED ON
 32e:	f6 df       	rcall	.-20     	; 0x31c <green_LED_ON>
	red_LED_OFF(); // RED LED OFF
 330:	e3 df       	rcall	.-58     	; 0x2f8 <red_LED_OFF>
 332:	20 e0       	ldi	r18, 0x00	; 0
	for (int i = 0; i < x; i++){
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	15 c0       	rjmp	.+42     	; 0x362 <blink_Leds+0x3a>
 338:	e2 e0       	ldi	r30, 0x02	; 2
		PORTH ^= (1 << LEDG_PIN); // GREEN LED ON
 33a:	f1 e0       	ldi	r31, 0x01	; 1
 33c:	90 81       	ld	r25, Z
 33e:	80 e2       	ldi	r24, 0x20	; 32
 340:	89 27       	eor	r24, r25
 342:	80 83       	st	Z, r24
 344:	90 81       	ld	r25, Z
		PORTH ^= (1 << LEDR_PIN); // RED LED OFF
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	89 27       	eor	r24, r25
 34a:	80 83       	st	Z, r24
 34c:	4f ef       	ldi	r20, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 34e:	83 ec       	ldi	r24, 0xC3	; 195
 350:	99 e0       	ldi	r25, 0x09	; 9
 352:	41 50       	subi	r20, 0x01	; 1
 354:	80 40       	sbci	r24, 0x00	; 0
 356:	90 40       	sbci	r25, 0x00	; 0
 358:	e1 f7       	brne	.-8      	; 0x352 <blink_Leds+0x2a>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <blink_Leds+0x34>
 35c:	00 00       	nop
 35e:	2f 5f       	subi	r18, 0xFF	; 255
	PORTH &= ~(1 << LEDG_PIN);
}
void blink_Leds(int x){
	green_LED_ON(); // GREEN LED ON
	red_LED_OFF(); // RED LED OFF
	for (int i = 0; i < x; i++){
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	2c 17       	cp	r18, r28
 364:	3d 07       	cpc	r19, r29
 366:	44 f3       	brlt	.-48     	; 0x338 <blink_Leds+0x10>
		PORTH ^= (1 << LEDG_PIN); // GREEN LED ON
		PORTH ^= (1 << LEDR_PIN); // RED LED OFF
		_delay_ms(200);
	}
	green_LED_ON();
 368:	d9 df       	rcall	.-78     	; 0x31c <green_LED_ON>
 36a:	cc df       	rcall	.-104    	; 0x304 <red_LED_ON>
	red_LED_ON();
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
}
 370:	08 95       	ret

00000372 <USART0_sendChar>:
 372:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>

void USART0_sendChar(char c){
	/*This next loop checks if the previous transmission is completed by checking the USARTn.STATUS register.
	This is done by polling the status register until the empty flag "STATUS.DREIF" is set.
	*/
	while (!(UCSR0A & (1 << UDRE0)))
 376:	95 ff       	sbrs	r25, 5
 378:	fc cf       	rjmp	.-8      	; 0x372 <USART0_sendChar>
	{
		;
	}
	UDR0 = c;
 37a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
 37e:	08 95       	ret

00000380 <USART0_sendString>:
}
void USART0_sendString(char *str){
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)	{
 38a:	c0 e0       	ldi	r28, 0x00	; 0
 38c:	d0 e0       	ldi	r29, 0x00	; 0
 38e:	06 c0       	rjmp	.+12     	; 0x39c <USART0_sendString+0x1c>
		USART0_sendChar(str[i]);
 390:	f8 01       	movw	r30, r16
 392:	ec 0f       	add	r30, r28
 394:	fd 1f       	adc	r31, r29
 396:	80 81       	ld	r24, Z
 398:	ec df       	rcall	.-40     	; 0x372 <USART0_sendChar>
		;
	}
	UDR0 = c;
}
void USART0_sendString(char *str){
	for(size_t i = 0; i < strlen(str); i++)	{
 39a:	21 96       	adiw	r28, 0x01	; 1
 39c:	f8 01       	movw	r30, r16
 39e:	01 90       	ld	r0, Z+
 3a0:	00 20       	and	r0, r0
 3a2:	e9 f7       	brne	.-6      	; 0x39e <USART0_sendString+0x1e>
 3a4:	31 97       	sbiw	r30, 0x01	; 1
 3a6:	e0 1b       	sub	r30, r16
 3a8:	f1 0b       	sbc	r31, r17
 3aa:	ce 17       	cp	r28, r30
 3ac:	df 07       	cpc	r29, r31
 3ae:	80 f3       	brcs	.-32     	; 0x390 <USART0_sendString+0x10>
		USART0_sendChar(str[i]);
	}
}
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	1f 91       	pop	r17
 3b6:	0f 91       	pop	r16
 3b8:	08 95       	ret

000003ba <USART0_read>:
char USART0_read(void){
	while (!(UCSR0A & (1 << RXC0)))
 3ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
 3be:	88 23       	and	r24, r24
 3c0:	e4 f7       	brge	.-8      	; 0x3ba <USART0_read>
	{
		;
	}
	return UDR0;
 3c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
}
 3c6:	08 95       	ret

000003c8 <execute>:
void execute(char *command)
{
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	ec 01       	movw	r28, r24
	if(strcmp(command, "rON") == 0){
 3ce:	60 e0       	ldi	r22, 0x00	; 0
 3d0:	72 e0       	ldi	r23, 0x02	; 2
 3d2:	ac d0       	rcall	.+344    	; 0x52c <strcmp>
 3d4:	89 2b       	or	r24, r25
 3d6:	29 f4       	brne	.+10     	; 0x3e2 <execute+0x1a>
		USART0_sendString("Red LED is now ON.\r\n");
 3d8:	84 e0       	ldi	r24, 0x04	; 4
 3da:	92 e0       	ldi	r25, 0x02	; 2
		red_LED_ON();
 3dc:	d1 df       	rcall	.-94     	; 0x380 <USART0_sendString>
 3de:	92 df       	rcall	.-220    	; 0x304 <red_LED_ON>
 3e0:	42 c0       	rjmp	.+132    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	}
	else if (strcmp(command, "rOFF") == 0){
 3e2:	69 e1       	ldi	r22, 0x19	; 25
 3e4:	72 e0       	ldi	r23, 0x02	; 2
 3e6:	ce 01       	movw	r24, r28
 3e8:	a1 d0       	rcall	.+322    	; 0x52c <strcmp>
 3ea:	89 2b       	or	r24, r25
		USART0_sendString("Red LED is now OFF.\r\n");
 3ec:	29 f4       	brne	.+10     	; 0x3f8 <execute+0x30>
 3ee:	8e e1       	ldi	r24, 0x1E	; 30
 3f0:	92 e0       	ldi	r25, 0x02	; 2
 3f2:	c6 df       	rcall	.-116    	; 0x380 <USART0_sendString>
		red_LED_OFF();
 3f4:	81 df       	rcall	.-254    	; 0x2f8 <red_LED_OFF>
 3f6:	37 c0       	rjmp	.+110    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	}else if (strcmp(command, "gON") == 0){
 3f8:	64 e3       	ldi	r22, 0x34	; 52
 3fa:	72 e0       	ldi	r23, 0x02	; 2
 3fc:	ce 01       	movw	r24, r28
 3fe:	96 d0       	rcall	.+300    	; 0x52c <strcmp>
 400:	89 2b       	or	r24, r25
		USART0_sendString("Green LED is now ON.\r\n");
 402:	29 f4       	brne	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 404:	88 e3       	ldi	r24, 0x38	; 56
 406:	92 e0       	ldi	r25, 0x02	; 2
		green_LED_ON();
 408:	bb df       	rcall	.-138    	; 0x380 <USART0_sendString>
 40a:	88 df       	rcall	.-240    	; 0x31c <green_LED_ON>
	} else if (strcmp(command, "gOFF") == 0){
 40c:	2c c0       	rjmp	.+88     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 40e:	6f e4       	ldi	r22, 0x4F	; 79
 410:	72 e0       	ldi	r23, 0x02	; 2
 412:	ce 01       	movw	r24, r28
 414:	8b d0       	rcall	.+278    	; 0x52c <strcmp>
		USART0_sendString("Green LED is now OFF.\r\n");
 416:	89 2b       	or	r24, r25
 418:	29 f4       	brne	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 41a:	84 e5       	ldi	r24, 0x54	; 84
		green_LED_OFF();
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	b0 df       	rcall	.-160    	; 0x380 <USART0_sendString>
	} else if (strcmp(command, "blink") == 0){
 420:	77 df       	rcall	.-274    	; 0x310 <green_LED_OFF>
 422:	21 c0       	rjmp	.+66     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 424:	6c e6       	ldi	r22, 0x6C	; 108
 426:	72 e0       	ldi	r23, 0x02	; 2
 428:	ce 01       	movw	r24, r28
 42a:	80 d0       	rcall	.+256    	; 0x52c <strcmp>
		USART0_sendString("Green LED and Red LED are now blinking.\r\n");
 42c:	89 2b       	or	r24, r25
 42e:	39 f4       	brne	.+14     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		blink_Leds(20);
 430:	82 e7       	ldi	r24, 0x72	; 114
 432:	92 e0       	ldi	r25, 0x02	; 2
 434:	a5 df       	rcall	.-182    	; 0x380 <USART0_sendString>
 436:	84 e1       	ldi	r24, 0x14	; 20
 438:	90 e0       	ldi	r25, 0x00	; 0
	} else if (strcmp(command, "sleep") == 0){		// here is where in invoke the sleep mode
 43a:	76 df       	rcall	.-276    	; 0x328 <blink_Leds>
 43c:	14 c0       	rjmp	.+40     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 43e:	6c e9       	ldi	r22, 0x9C	; 156
 440:	72 e0       	ldi	r23, 0x02	; 2
 442:	ce 01       	movw	r24, r28
 444:	73 d0       	rcall	.+230    	; 0x52c <strcmp>
		red_LED_OFF();								// Turns off red LED
 446:	89 2b       	or	r24, r25
 448:	59 f4       	brne	.+22     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
		green_LED_OFF();							// Turns off green LED
 44a:	56 df       	rcall	.-340    	; 0x2f8 <red_LED_OFF>
 44c:	61 df       	rcall	.-318    	; 0x310 <green_LED_OFF>
		sys_disable();								// disables all modules on the boards. can be changed to keep some modules on
 44e:	62 de       	rcall	.-828    	; 0x114 <sys_disable>
 450:	83 b7       	in	r24, 0x33	; 51
		sleep_mode(); // first sleep instruction needs to be invoked twice.
 452:	81 60       	ori	r24, 0x01	; 1
 454:	83 bf       	out	0x33, r24	; 51
 456:	88 95       	sleep
 458:	83 b7       	in	r24, 0x33	; 51
 45a:	8e 7f       	andi	r24, 0xFE	; 254
 45c:	83 bf       	out	0x33, r24	; 51
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
 460:	82 ea       	ldi	r24, 0xA2	; 162
		}else{
		USART0_sendString("Your Command is undefined.\r\n");
 462:	92 e0       	ldi	r25, 0x02	; 2
 464:	8d df       	rcall	.-230    	; 0x380 <USART0_sendString>
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
	}
}
 46a:	08 95       	ret

0000046c <__vector_4>:
 46c:	1f 92       	push	r1
 46e:	0f 92       	push	r0

ISR (INT3_vect){
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	0f 92       	push	r0
 474:	11 24       	eor	r1, r1
 476:	0b b6       	in	r0, 0x3b	; 59
 478:	0f 92       	push	r0
 47a:	2f 93       	push	r18
 47c:	3f 93       	push	r19
 47e:	4f 93       	push	r20
 480:	5f 93       	push	r21
 482:	6f 93       	push	r22
 484:	7f 93       	push	r23
 486:	8f 93       	push	r24
 488:	9f 93       	push	r25
 48a:	af 93       	push	r26
 48c:	bf 93       	push	r27
 48e:	ef 93       	push	r30
 490:	ff 93       	push	r31
	if ((PIND & (1 << int_SWITCH_PIN))){
 492:	4b 9b       	sbis	0x09, 3	; 9
 494:	03 c0       	rjmp	.+6      	; 0x49c <__vector_4+0x30>
		//sleep_disable();
		sys_enable();
 496:	93 de       	rcall	.-730    	; 0x1be <sys_enable>
		red_LED_ON();
 498:	35 df       	rcall	.-406    	; 0x304 <red_LED_ON>
		green_LED_ON();
 49a:	40 df       	rcall	.-384    	; 0x31c <green_LED_ON>
 49c:	ff 91       	pop	r31
	}
}
 49e:	ef 91       	pop	r30
 4a0:	bf 91       	pop	r27
 4a2:	af 91       	pop	r26
 4a4:	9f 91       	pop	r25
 4a6:	8f 91       	pop	r24
 4a8:	7f 91       	pop	r23
 4aa:	6f 91       	pop	r22
 4ac:	5f 91       	pop	r21
 4ae:	4f 91       	pop	r20
 4b0:	3f 91       	pop	r19
 4b2:	2f 91       	pop	r18
 4b4:	0f 90       	pop	r0
 4b6:	0b be       	out	0x3b, r0	; 59
 4b8:	0f 90       	pop	r0
 4ba:	0f be       	out	0x3f, r0	; 63
 4bc:	0f 90       	pop	r0
 4be:	1f 90       	pop	r1
 4c0:	18 95       	reti

000004c2 <main>:
 4c2:	cf 93       	push	r28

int main(void){
 4c4:	df 93       	push	r29
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	28 97       	sbiw	r28, 0x08	; 8
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
	
	char command[8];
	int index = 0;
	char c;
	INTERRUPTS_init();
 4d6:	ff de       	rcall	.-514    	; 0x2d6 <INTERRUPTS_init>
	USART0_init();
 4d8:	dd de       	rcall	.-582    	; 0x294 <USART0_init>
	LED_init();
 4da:	c6 de       	rcall	.-628    	; 0x268 <LED_init>
	SWITCH_init();
 4dc:	ce de       	rcall	.-612    	; 0x27a <SWITCH_init>
 4de:	07 df       	rcall	.-498    	; 0x2ee <sleep_init>
	sleep_init();
 4e0:	78 94       	sei
	sei();					// sets global interrupts by writing a 1 to the I-bit (interrupt-bit) in the Status Register (SREG)
 4e2:	00 e0       	ldi	r16, 0x00	; 0
		red_LED_ON();
		green_LED_ON();
	}
}

int main(void){
 4e4:	10 e0       	ldi	r17, 0x00	; 0
 4e6:	69 df       	rcall	.-302    	; 0x3ba <USART0_read>
			red_LED_OFF();								// Turns off red LED
			green_LED_OFF();							// Turns off green LED
			sys_disable();								// disables all modules on the boards. can be changed to keep some modules on
		}*/
			
		c = USART0_read();
 4e8:	8a 30       	cpi	r24, 0x0A	; 10
 4ea:	99 f0       	breq	.+38     	; 0x512 <main+0x50>
		if (c != '\n' && c !='\r'){
 4ec:	8d 30       	cpi	r24, 0x0D	; 13
 4ee:	89 f0       	breq	.+34     	; 0x512 <main+0x50>
 4f0:	98 01       	movw	r18, r16
 4f2:	2f 5f       	subi	r18, 0xFF	; 255
			command[index++] = c;
 4f4:	3f 4f       	sbci	r19, 0xFF	; 255
 4f6:	e1 e0       	ldi	r30, 0x01	; 1
 4f8:	f0 e0       	ldi	r31, 0x00	; 0
 4fa:	ec 0f       	add	r30, r28
 4fc:	fd 1f       	adc	r31, r29
 4fe:	e0 0f       	add	r30, r16
 500:	f1 1f       	adc	r31, r17
 502:	80 83       	st	Z, r24
 504:	29 30       	cpi	r18, 0x09	; 9
 506:	31 05       	cpc	r19, r1
			if (index > 8){
 508:	14 f4       	brge	.+4      	; 0x50e <main+0x4c>
 50a:	89 01       	movw	r16, r18
 50c:	02 c0       	rjmp	.+4      	; 0x512 <main+0x50>
			sys_disable();								// disables all modules on the boards. can be changed to keep some modules on
		}*/
			
		c = USART0_read();
		if (c != '\n' && c !='\r'){
			command[index++] = c;
 50e:	00 e0       	ldi	r16, 0x00	; 0
 510:	10 e0       	ldi	r17, 0x00	; 0
			if (index > 8){
				index = 0;
 512:	8a 30       	cpi	r24, 0x0A	; 10
 514:	41 f7       	brne	.-48     	; 0x4e6 <main+0x24>
			}
		}
		if (c == '\n'){
 516:	e1 e0       	ldi	r30, 0x01	; 1
 518:	f0 e0       	ldi	r31, 0x00	; 0
			command[index] = '\0';
 51a:	ec 0f       	add	r30, r28
 51c:	fd 1f       	adc	r31, r29
 51e:	e0 0f       	add	r30, r16
 520:	f1 1f       	adc	r31, r17
 522:	10 82       	st	Z, r1
 524:	ce 01       	movw	r24, r28
			index = 0;
			execute(command);
 526:	01 96       	adiw	r24, 0x01	; 1
 528:	4f df       	rcall	.-354    	; 0x3c8 <execute>
 52a:	db cf       	rjmp	.-74     	; 0x4e2 <main+0x20>

0000052c <strcmp>:
 52c:	fb 01       	movw	r30, r22
 52e:	dc 01       	movw	r26, r24
 530:	8d 91       	ld	r24, X+
 532:	01 90       	ld	r0, Z+
 534:	80 19       	sub	r24, r0
 536:	01 10       	cpse	r0, r1
 538:	d9 f3       	breq	.-10     	; 0x530 <strcmp+0x4>
 53a:	99 0b       	sbc	r25, r25
 53c:	08 95       	ret

0000053e <_exit>:
 53e:	f8 94       	cli

00000540 <__stop_program>:
 540:	ff cf       	rjmp	.-2      	; 0x540 <__stop_program>
